{"version":3,"sources":["Components/AddItemForm/AddItemForm.module.css","Components/Task/Task.module.css","Components/Buttons/Buttons.module.css","Redux-Store/todolists-reducer.ts","Redux-Store/tasks-reducer.ts","Redux-Store/Authorization-reducer.ts","Redux-Store/App-reducer.ts","Redux-Store/store.ts","Utils/Error-urils.ts","api/Auth-Api.ts","Thunk/Auth-thunk.ts","Components/SignIn/SignIn.tsx","Utils/FunctionUtils/Redirect.tsx","api/todolists-api.ts","Components/SnackBar/SnackBar.tsx","Components/LoginPage/LoginPage.tsx","Thunk/Todolist-thunk.ts","Components/ProgressBar/ProgressBar.tsx","Components/AddItemForm/AddItemForm.tsx","Components/Header/Header.tsx","Components/RenameSpanFunc/EditableSpan.tsx","Components/Task/Task.tsx","Components/Buttons/Button.tsx","Components/Buttons/Buttons.tsx","Thunk/Task-thunk.ts","Components/Todolist/Todolist.tsx","Components/SmallApp/SmallApp.tsx","Utils/Loding/Loading.tsx","App.tsx","reportWebVitals.ts","index.tsx","Components/SignIn/SignIn.module.css","Components/Todolist/Todolist.module.css","Components/LoginPage/LoginPage.module.css","Utils/Loding/Loading.module.css"],"names":["module","exports","todolistsReducer","createSlice","name","initialState","reducers","extraReducers","builder","addCase","setTodolistsAC","state","action","payload","todolists","map","tl","entityStatus","filter","removeTodolistAC","id","todolistId","addTodolistAC","title","addedDate","order","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","reducer","createAction","TaskSlice","setTasksAC","tasks","removeTaskAC","t","taskId","addTaskAC","task","updateTaskAC","model","changeTaskEntityStatusAC","entityTaskStatus","forEach","copyState","tasksReducer","actions","AuthorizationReducer","login","email","isAuth","setAuthUserDataAC","AppSlice","status","error","isFetching","setAppStatusAC","setAppErrorMessageAC","setIsFetchingAC","AppReducer","store","combineReducers","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppSelector","useSelector","window","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","instance","axios","create","baseURL","withCredentials","headers","AuthAPI","get","then","response","delete","password","rememberMe","captcha","post","AuthMeTC","createAsyncThunk","_","a","resultCode","Error","Component","TaskStatuses","TaskPriorities","RedirectToApp","props","useDispatch","registrationForm","useFormik","initialValues","validate","values","errors","test","onSubmit","responseAuthMe","LoginTC","resetForm","passwordOne","mustContainData","toLowerCase","toUpperCase","className","s","main_login","form_3","handleSubmit","style","color","clearfix","htmlFor","type","placeholder","getFieldProps","error_block","touched","fontSize","text_helper","angle","text_helper_small_text","width","height","label_rememberMe_block","button","value","disabled","isValid","dirty","to","MustContainItem","label","meetsReq","classArr","push","join","setClass","Snackbars","typeError","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","Alert","React","forwardRef","ref","elevation","variant","LoginPage","background_block_login_page","block_login_page","todolistsAPI","put","ProgressBar","Box","LinearProgress","AddItemForm","memo","addItem","useState","setTitle","setError","addItems","trim","add_item_form_main_block","TextField","margin","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","size","onClick","Header","onClickHandler","addTodolist","AppBar","position","Toolbar","Typography","component","flexGrow","Button","EditableSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","onDoubleClick","Task","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","cascade","is_done","Checkbox","Delete","CleanButton","activeButton","Buttons","filterBS","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","buttons_block","updateTaskTC","domainModel","getState","allTasksFromState","tasksForCurrentTodolist","find","apiModel","startDate","priority","description","deadline","item","Todolist","useEffect","items","el","tasksForTodolist","removeTodolist","changeTodolistTitle","updateTodolistTC","removeTaskTC","addTask","createTaskTC","changeStatus","newTitle","main_paper_div","block_name_and_delete","tasks_block","SmallApp","AuthRedirect","createTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","borderRadius","backgroundColor","Loading","main_loading","loader","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8032db51.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"add_item_form_main_block\":\"AddItemForm_add_item_form_main_block__gk74B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__3JDJx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons_block\":\"Buttons_buttons_block__av5UJ\"};","import {TodolistType} from '../api/todolists-api';\r\nimport {RequestStatusType} from \"./App-reducer\";\r\nimport {createAction, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\nexport type InitialStateTodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\n\r\nconst initialState: Array<InitialStateTodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0}*/\r\n];\r\n\r\nconst TodolistSlice = createSlice({\r\n    name: \"TodolistSlice\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        // removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n        //     state.filter(tl => tl.id !== action.payload.todolistId);\r\n        // },\r\n        // addTodolistAC(state, action: PayloadAction<{ title: string, todolistId: string }>) {\r\n        //     state = [\r\n        //         {\r\n        //             id: action.payload.todolistId,\r\n        //             title: action.payload.title,\r\n        //             entityStatus: 'idle',\r\n        //             filter: 'All',\r\n        //             addedDate: '',\r\n        //             order: 0\r\n        //         },\r\n        //         ...state\r\n        //     ];\r\n        // },\r\n        // changeTodolistTitleAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n        //     state.map(tl => tl.id === action.payload.todolistId ? {...tl, title: action.payload.title} : tl);\r\n        // },\r\n        // changeTodolistFilterAC(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n        //     state.map(tl => tl.id === action.payload.todolistId ? {...tl, filter: action.payload.filter} : tl);\r\n        // },\r\n        // changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\r\n        //     state.map(tl => tl.id === action.payload.todolistId ? {\r\n        //         ...tl,\r\n        //         entityStatus: action.payload.entityStatus\r\n        //     } : tl);\r\n        // },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(setTodolistsAC, (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n            return state = action.payload.todolists.map(tl => ({...tl, entityStatus: 'idle', filter: 'All'}));\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action: PayloadAction<{ todolistId: string }>) => {\r\n            return state.filter(tl => tl.id !== action.payload.todolistId);\r\n        });\r\n        builder.addCase(addTodolistAC, (state, action: PayloadAction<{ title: string, todolistId: string }>) => {\r\n            return state = [\r\n                {\r\n                    id: action.payload.todolistId,\r\n                    title: action.payload.title,\r\n                    entityStatus: 'idle',\r\n                    filter: 'All',\r\n                    addedDate: '',\r\n                    order: 0\r\n                },\r\n                ...state\r\n            ];\r\n        });\r\n        builder.addCase(changeTodolistTitleAC, (state, action: PayloadAction<{ todolistId: string, title: string }>) => {\r\n            return state.map(tl => tl.id === action.payload.todolistId ? {...tl, title: action.payload.title} : tl);\r\n        });\r\n        builder.addCase(changeTodolistFilterAC, (state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) => {\r\n            return state.map(tl => tl.id === action.payload.todolistId ? {...tl, filter: action.payload.filter} : tl);\r\n        });\r\n        builder.addCase(changeTodolistEntityStatusAC, (state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) => {\r\n            return state.map(tl => tl.id === action.payload.todolistId ? {\r\n                ...tl,\r\n                entityStatus: action.payload.entityStatus\r\n            } : tl);\r\n        });\r\n    },\r\n});\r\n\r\nexport const todolistsReducer = TodolistSlice.reducer;\r\n\r\nexport const setTodolistsAC = createAction<{ todolists: Array<TodolistType> }>('SET_TODOLISTS');\r\nexport const removeTodolistAC = createAction<{ todolistId: string }>('REMOVE_TODOLIST');\r\nexport const addTodolistAC = createAction<{ title: string, todolistId: string }>('ADD_TODOLIST');\r\nexport const changeTodolistTitleAC = createAction<{ todolistId: string, title: string }>('CHANGE_TODOLIST_TITLE');\r\nexport const changeTodolistFilterAC = createAction<{ todolistId: string, filter: FilterValuesType }>('CHANGE_TODOLIST_FILTER');\r\nexport const changeTodolistEntityStatusAC = createAction<{ todolistId: string, entityStatus: RequestStatusType }>('CHANGE_TODOLIST_ENTITY_STATUS');","import {TodolistType, UpdateTaskModelType} from '../api/todolists-api';\r\nimport {RequestStatusType} from \"./App-reducer\";\r\nimport {createAction, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TaskTypeWithStatusEntity} from \"../Types/TaskType\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskTypeWithStatusEntity>\r\n}\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low, entityTaskStatus: \"idle\" },\r\n    ]*/\r\n};\r\n\r\nconst TaskSlice = createSlice({\r\n    name: \"TaskSlice\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskTypeWithStatusEntity>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks;\r\n        },\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n             state[action.payload.todolistId] = state[action.payload.todolistId].filter(t => t.id !== action.payload.taskId);\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ todolistId: string, task: TaskTypeWithStatusEntity }>) {\r\n            state[action.payload.todolistId] = [action.payload.task, ...state[action.payload.todolistId]];\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string, model: UpdateTaskModelType }>) {\r\n            state[action.payload.todolistId] = state[action.payload.todolistId].map(t => t.id === action.payload.taskId ? {...t, ...action.payload.model} : t);\r\n        },\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\r\n            state[action.payload.todolistId] = state[action.payload.todolistId].map(t => t.id === action.payload.taskId ? {\r\n                ...t,\r\n                entityTaskStatus: action.payload.entityStatus\r\n            } : t);\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n\r\n        /*TODOLIST AC*/\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            return action.payload.todolists.forEach((tl) => state[tl.id] = []);\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            let copyState = state;\r\n            delete copyState[action.payload.todolistId];\r\n            return copyState;\r\n        });\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolistId] = [];\r\n        });\r\n\r\n        // /*TASK ActionCreators*/\r\n        // builder.addCase(setTasksAC, (state, action: PayloadAction<{ tasks: Array<TaskTypeWithStatusEntity>, todolistId: string }>) => {\r\n        //     state[action.payload.todolistId] = action.payload.tasks;\r\n        // });\r\n        // builder.addCase(removeTaskAC, (state, action) => {\r\n        //      state[action.payload.todolistId].filter(t => t.id !== action.payload.taskId);\r\n        // });\r\n        // builder.addCase(addTaskAC, (state, action: PayloadAction<{ todolistId: string, task: TaskTypeWithStatusEntity }>) => {\r\n        //     state[action.payload.todolistId] = [action.payload.task, ...state[action.payload.todolistId]];\r\n        // });\r\n        // builder.addCase(updateTaskAC, (state, action: PayloadAction<{ taskId: string, todolistId: string, model: UpdateTaskModelType }>) => {\r\n        //     state[action.payload.todolistId].map(t => t.id === action.payload.taskId ? {...t, ...action.payload.model} : t);\r\n        // });\r\n        // builder.addCase(changeTaskEntityStatusAC, (state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) => {\r\n        //     state[action.payload.todolistId].map(t => t.id === action.payload.taskId ? {...t, entityTaskStatus: action.payload.entityStatus} : t);\r\n        // });\r\n    },\r\n});\r\n\r\n\r\n// export const setTasksAC = createAction<{ tasks: Array<TaskTypeWithStatusEntity>, todolistId: string }>(\"SET_TASKS\");\r\n// export const removeTaskAC = createAction<{ taskId: string, todolistId: string }, \"REMOVE_TASK\">(\"REMOVE_TASK\");\r\n// export const addTaskAC = createAction<{ todolistId: string, task: TaskTypeWithStatusEntity }>(\"ADD_TASK\");\r\n// export const updateTaskAC = createAction<{ taskId: string, todolistId: string, model: UpdateTaskModelType }>(\"UPDATE_TASK\");\r\n// export const changeTaskEntityStatusAC = createAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>(\"CHANGE_TASK_ENTITY_STATUS\");\r\n\r\n\r\nexport const tasksReducer = TaskSlice.reducer;\r\n\r\nexport const {removeTaskAC, addTaskAC, changeTaskEntityStatusAC, updateTaskAC, setTasksAC} = TaskSlice.actions;","import {createAction, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {DataUserAuthType} from \"../Types/AythTypes\";\r\nimport {AuthMeTC} from \"../Thunk/Auth-thunk\";\r\n\r\nexport type initialStateAuthorizationType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n};\r\nlet initialState: initialStateAuthorizationType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n};\r\n\r\nconst AuthSlice = createSlice({\r\n    name: \"AuthSlice\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(setAuthUserDataAC, (state, {payload}: PayloadAction<DataUserAuthType>) => {\r\n            return payload\r\n        });\r\n    },\r\n});\r\n\r\nexport const AuthorizationReducer = AuthSlice.reducer;\r\n\r\nexport const setAuthUserDataAC = createAction<DataUserAuthType>('AUTH_ME');","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nexport type AppInitialStateType = {\r\n    status: RequestStatusType\r\n    error: null | string\r\n    isFetching: boolean\r\n};\r\n\r\nconst initialState: AppInitialStateType = {\r\n    status: 'succeeded',\r\n    error: null,\r\n    isFetching: true,\r\n}\r\n\r\nconst AppSlice = createSlice({\r\n    name: \"AppSlice\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status;\r\n        },\r\n        setAppErrorMessageAC(state, action: PayloadAction<{ error: null | string }>) {\r\n            state.error = action.payload.error;\r\n        },\r\n        setIsFetchingAC(state, action: PayloadAction<{ isFetching: boolean }>) {\r\n            state.isFetching = action.payload.isFetching;\r\n        },\r\n    },\r\n});\r\n\r\nexport const AppReducer = AppSlice.reducer;\r\n\r\nexport const {setIsFetchingAC, setAppStatusAC, setAppErrorMessageAC} = AppSlice.actions;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {AuthorizationReducer} from \"./Authorization-reducer\";\r\nimport {AppReducer} from \"./App-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasksReducer,\r\n    todolistsReducer,\r\n    AuthorizationReducer,\r\n    AppReducer,\r\n})\r\n\r\n\r\n/*export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));*/\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        AuthorizationReducer,\r\n        todolistsReducer,\r\n        AppReducer,\r\n        tasksReducer\r\n    },\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;   // optimazed UseSelector\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\nimport {setAppErrorMessageAC, setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\n\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorMessageAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorMessageAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorMessageAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {AuthRequestType, ResponseGetAuthType} from \"../Types/AythTypes\";\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport {ResponseType} from \"./todolists-api\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '46d03c13-5122-4b12-95a1-e807d8a6bece'\r\n    }\r\n});\r\n\r\nexport const AuthAPI = {\r\n    AuthUser () {\r\n        return instance.get<ResponseGetAuthType>(`auth/me`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    LogOut () {\r\n        return instance.delete<ResponseType>(`auth/login/`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    Login (email: string, password: string, rememberMe: boolean, captcha: boolean) {\r\n        return instance.post<AuthRequestType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login/`, {email, password, rememberMe, captcha})\r\n            .then(response => response.data);\r\n    },\r\n}","import {setAuthUserDataAC} from \"../Redux-Store/Authorization-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Error-urils\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsFetchingAC} from \"../Redux-Store/App-reducer\";\r\nimport {AuthAPI} from \"../api/Auth-Api\";\r\nimport {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType} from \"../Redux-Store/store\";\r\n\r\nexport const AuthMeTC = createAsyncThunk<unknown, undefined, {\r\n    dispatch: Dispatch\r\n    state: AppRootStateType\r\n}>(\r\n    'Auth/meTC',\r\n    async (_, {dispatch}) => {\r\n\r\n        dispatch(setIsFetchingAC({isFetching: true}));\r\n\r\n        try {\r\n            const response = await AuthAPI.AuthUser()\r\n            if (response.resultCode === 0) {\r\n                let {login, email, id} = response.data\r\n                const payload = {id, email, login, isAuth: true}\r\n                dispatch(setAuthUserDataAC(payload))\r\n            }\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                handleServerNetworkError(error, dispatch);\r\n            }\r\n        } finally {\r\n            dispatch(setIsFetchingAC({isFetching: false}));\r\n        }\r\n    }\r\n);\r\n\r\nexport const LogOutTC = () => async (dispatch: Dispatch) => {\r\n    const response = await AuthAPI.LogOut()\r\n    if (response.resultCode === 0) {\r\n        dispatch(setAuthUserDataAC({id: null, email: null, login: null, isAuth: false}))\r\n    }\r\n};\r\n\r\nexport const LoginTC = (values: { email: string, password: string, rememberMe: boolean, captcha: boolean }) => async (dispatch: Dispatch) => {\r\n\r\n    dispatch(setIsFetchingAC({isFetching: true}));\r\n\r\n    try {\r\n        const response = await AuthAPI.Login(values.email, values.password, values.rememberMe, values.captcha);\r\n        const responseAuthMe = await AuthAPI.AuthUser();\r\n        if (response.resultCode === 0) {\r\n            let {login, email, id} = responseAuthMe.data;\r\n            dispatch(setAuthUserDataAC({id, email, login, isAuth: true}))\r\n        } else {\r\n            handleServerAppError(response, dispatch);\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    } finally {\r\n        dispatch(setIsFetchingAC({isFetching: false}));\r\n    }\r\n};","import React from \"react\";\r\nimport s from \"./SignIn.module.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {LoginTC} from \"../../Thunk/Auth-thunk\";\r\nimport {RedirectToApp} from \"../../Utils/FunctionUtils/Redirect\";\r\n\r\ntype SignInType = {};\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe?: boolean\r\n};\r\n\r\nconst SignIn = (props: SignInType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const registrationForm = useFormik({\r\n        initialValues: {email: \"\", password: \"\", rememberMe: false, captcha: true},\r\n        validate: (values: FormikErrorType) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password is required\";\r\n            } else if (values.password.length < 4) {\r\n                errors.password = \"Invalid password\";\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(LoginTC(values));\r\n            registrationForm.resetForm();\r\n        },\r\n    });\r\n\r\n    const passwordOne = registrationForm.values.password;\r\n    const mustContainData = [\r\n        [\"заглавную букву\", passwordOne.toLowerCase() !== passwordOne],\r\n        [\"строчную букву\", passwordOne.toUpperCase() !== passwordOne],\r\n        [\"цифру\", /\\d/.test(passwordOne)],\r\n        [\"5 символов\", passwordOne.length >= 4],\r\n    ];\r\n\r\n    return (\r\n        <div className={s.main_login}>\r\n            <form className={s.form_3} onSubmit={registrationForm.handleSubmit}>\r\n\r\n                <h1 style={{color: \"white\"}}>Account login</h1>\r\n\r\n                <p className={s.clearfix}>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"email\"\r\n                        {...registrationForm.getFieldProps(\"email\")}\r\n                    />\r\n                    <div className={s.error_block}>\r\n                        {registrationForm.touched.email && registrationForm.errors.email ? (\r\n                            <div\r\n                                style={{color: \"red\", fontSize: \"1.2rem\"}}>{registrationForm.errors.email}</div>\r\n                        ) : null}\r\n                    </div>\r\n                </p>\r\n\r\n                <p className={s.clearfix}>\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"password\"\r\n                        {...registrationForm.getFieldProps(\"password\")}\r\n                    />\r\n                    <div className={s.error_block}>\r\n                        {registrationForm.touched.password && registrationForm.errors.password ? (\r\n                            <div style={{\r\n                                color: \"red\",\r\n                                fontSize: \"1.2rem\"\r\n                            }}>{registrationForm.errors.password}</div>\r\n                        ) : null}\r\n                    </div>\r\n                    {registrationForm.values.password ? (\r\n                        <div className={s.text_helper}>\r\n                            <div className={s.angle}/>\r\n                            <span>Пароль должен содержать как минимум:</span>\r\n                            <div className={s.text_helper_small_text}>\r\n                                {mustContainData.map((data) => (\r\n                                    <MustContainItem key={data} data={data}/>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    ) : null}\r\n                </p>\r\n\r\n                <p className={s.clearfix}>\r\n                    <input\r\n                        style={{width: \"50px\", height: \"50px\"}}\r\n                        type=\"checkbox\"\r\n                        id=\"remember\"\r\n                        {...registrationForm.getFieldProps(\"rememberMe\")}\r\n                    />\r\n                    <label htmlFor=\"remember\" className={s.label_rememberMe_block}>\r\n                        Remember me\r\n                    </label>\r\n\r\n                    <button\r\n                        className={s.button}\r\n                        type=\"submit\"\r\n                        name=\"submit\"\r\n                        value=\"Submit\"\r\n                        disabled={!(registrationForm.isValid && registrationForm.dirty)}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </p>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default RedirectToApp(SignIn);\r\n\r\n\r\nconst MustContainItem = (props: any) => {\r\n    const {data} = props;\r\n    const label = data[0];\r\n    const meetsReq = data[1];\r\n\r\n    const setClass = () => {\r\n        const classArr = [\"invalidStyle\"]; //invalid logo img\r\n        if (meetsReq) classArr.push(\"validStyle\"); //valid logo img\r\n        return classArr.join(\" \");\r\n    };\r\n\r\n    return (\r\n        <span style={{fontSize: \"1rem\"}}>\r\n      <div className={\"validateChecklist\"}>\r\n        <span>{label}</span>\r\n        <div className={setClass()}/>\r\n      </div>\r\n    </span>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import {ComponentType} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux-Store/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport function AuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n\r\n        const isAuth = useSelector<AppRootStateType, boolean>(state => state.AuthorizationReducer.isAuth);\r\n        if (!isAuth) return (<Navigate to={\"/login\"} />);\r\n\r\n        return <Component {...props as T}/>\r\n\r\n    }\r\n\r\n    return RedirectComponent\r\n}\r\n\r\nexport function RedirectToApp<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n\r\n        const isAuth = useSelector<AppRootStateType, boolean>(state => state.AuthorizationReducer.isAuth);\r\n        if (isAuth) return (<Navigate to={\"/app\"} />);\r\n\r\n        return <Component {...props as T}/>\r\n\r\n    }\r\n\r\n    return RedirectComponent\r\n}","import axios, { AxiosResponse } from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '46d03c13-5122-4b12-95a1-e807d8a6bece'\r\n    }\r\n});\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux-Store/store\";\r\nimport {AppInitialStateType, setAppErrorMessageAC} from \"../../Redux-Store/App-reducer\";\r\n\r\ntype TypeErrorSnackbars = 'error' | 'warning';\r\n\r\ntype SnackbarsType = {\r\n  typeError:  TypeErrorSnackbars\r\n};\r\n\r\nexport const Snackbars = ({typeError}: SnackbarsType) => {\r\n\r\n    const { error } = useSelector<AppRootStateType, AppInitialStateType>(state => state.AppReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorMessageAC({error: null}));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'center'}}>\r\n            <Alert onClose={handleClose} severity={typeError} sx={{width: '100%'}}>\r\n                {error} 😠\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});","import React from 'react';\r\nimport SignIn from \"../SignIn/SignIn\";\r\nimport s from \"./LoginPage.module.css\";\r\nimport {Snackbars} from \"../SnackBar/SnackBar\";\r\n\r\nexport const LoginPage = () => {\r\n    return (\r\n        <div className={s.background_block_login_page}>\r\n            <div className={s.block_login_page}>\r\n                <SignIn/>\r\n                <Snackbars typeError={'error'}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import {todolistsAPI} from \"../api/todolists-api\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC\r\n} from \"../Redux-Store/todolists-reducer\";\r\nimport {setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Error-urils\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType} from \"../Redux-Store/store\";\r\n\r\n// export const getTodolistsTC = createAsyncThunk<unknown, undefined, {\r\n//     dispatch: Dispatch\r\n//     state: AppRootStateType\r\n// }>(\r\n//     'get/Todolists',\r\n//     async (_, {dispatch}) => {\r\n//\r\n//         dispatch(setAppStatusAC({status: 'loading'}));\r\n//\r\n//         try {\r\n//             const response = await todolistsAPI.getTodolists();\r\n//             if (response.status === 200) {\r\n//                 dispatch(setTodolistsAC({todolists: response.data}));\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//             }\r\n//         } catch (error) {\r\n//             if (error instanceof Error) {\r\n//                 handleServerNetworkError(error, dispatch);\r\n//             }\r\n//         }\r\n//     }\r\n// );\r\n\r\nexport const getTodolistsTC = () => async (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n    try {\r\n        const response = await todolistsAPI.getTodolists();\r\n        if (response.status === 200) {\r\n            dispatch(setTodolistsAC({todolists: response.data}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTodolistTC = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n    dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'loading'}));\r\n\r\n    try {\r\n        const response = await todolistsAPI.updateTodolist(todolistId, title);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(changeTodolistTitleAC({todolistId, title}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'failed'}));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'failed'}));\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch) => {\r\n\r\n    dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'loading'}));\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n    try {\r\n        const response = await todolistsAPI.deleteTodolist(todolistId);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(removeTodolistAC({todolistId}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'failed'}));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'failed'}));\r\n        }\r\n    }\r\n}\r\n\r\nexport const createTodolistTC = (title: string) => async (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n    try {\r\n        const response = await todolistsAPI.createTodolist(title);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(addTodolistAC({title, todolistId: response.data.data.item.id}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {Box, LinearProgress} from \"@mui/material\";\r\n\r\nexport const ProgressBar = () => {\r\n    return (\r\n        <Box sx={{ width: '100%' }} >\r\n            <LinearProgress color={\"secondary\"} />\r\n        </Box>\r\n    );\r\n};","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport s from \"./AddItemForm.module.css\";\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddBoxOutlinedIcon from '@mui/icons-material/AddBoxOutlined';\r\n\r\ntype AddItemFormPropsType = {\r\n    color: 'info' | 'secondary'\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({disabled, addItem, color}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItems = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItems();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.add_item_form_main_block}>\r\n            <TextField\r\n                style={{margin: \"10px\", width: \"100%\"}}\r\n                disabled={disabled}\r\n                variant=\"outlined\"\r\n                error={!!error}\r\n                value={title}\r\n                color={color}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label=\"Title\"\r\n                helperText={error}\r\n            />\r\n            <IconButton color=\"inherit\" size={\"large\"} onClick={addItems} disabled={disabled}>\r\n                <AddBoxOutlinedIcon style={{width: \"30px\", height: \"30px\"}} color={'inherit'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport '../SmallApp/SmallApp.css';\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {Button, Typography} from \"@mui/material\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport {RequestStatusType} from \"../../Redux-Store/App-reducer\";\r\n\r\ntype HeaderType = {\r\n    status: RequestStatusType\r\n    addTodolist: (title: string) => void\r\n    onClickHandler: () => void\r\n    login: string | null\r\n}\r\n\r\nexport const Header = ({ status, login, onClickHandler, addTodolist }: HeaderType) => {\r\n    return (\r\n        <AppBar position={\"fixed\"} color={\"secondary\"} style={{height: \"100px\"}}>\r\n            <Toolbar>\r\n                <div className={\"AddItem\"}>\r\n                    <AddItemForm addItem={addTodolist} color={\"info\"} disabled={status === 'loading' && true}/>\r\n                </div>\r\n\r\n                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}} className={\"global_todo_title\"}>\r\n                    Todolist for your business\r\n                </Typography>\r\n\r\n                <h3 className={\"Login_name\"}>{login}</h3>\r\n                <Button onClick={onClickHandler} color=\"error\" variant=\"contained\">LogOut</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    disabled?: boolean\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({value, onChange, disabled}: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode();\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            disabled={disabled}\r\n            onKeyPress={onKeyPressHandler}\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus onBlur={activateViewMode}\r\n            variant={\"standard\"}/>\r\n\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport s from \"./Task.module.css\";\r\nimport {EditableSpan} from '../RenameSpanFunc/EditableSpan'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses} from '../../api/todolists-api';\r\nimport {Fade} from \"react-awesome-reveal\";\r\nimport {TaskTypeWithStatusEntity} from \"../../Types/TaskType\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskTypeWithStatusEntity\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const disabled = props.task.entityTaskStatus === 'loading';\r\n\r\n    return (\r\n        <Fade cascade>\r\n            <div className={props.task.status === TaskStatuses.Completed ? s.is_done : ''}>\r\n                <Checkbox\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    color=\"secondary\"\r\n                    onChange={onChangeHandler}\r\n                />\r\n\r\n                <EditableSpan disabled={disabled} value={props.task.title} onChange={onTitleChangeHandler}/>\r\n                <IconButton onClick={onClickHandler} disabled={disabled}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        </Fade>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {FilterValuesType} from \"../../Redux-Store/todolists-reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    activeButton: FilterValuesType\r\n}\r\n\r\nexport const  CleanButton = ({title, onClickHandler, activeButton}: ButtonPropsType) => {\r\n    return (\r\n        <Button\r\n            color={activeButton === title ? \"secondary\" : \"secondary\"}\r\n            variant={activeButton === title ? \"contained\" : \"outlined\"}\r\n            onClick={onClickHandler}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport s from \"./Buttons.module.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CleanButton} from \"./Button\";\r\nimport {changeTodolistFilterAC, FilterValuesType} from \"../../Redux-Store/todolists-reducer\";\r\n\r\ntype ButtonsType = {\r\n    todolistId: string\r\n    filterBS: FilterValuesType\r\n}\r\n\r\nexport const Buttons = ({filterBS, todolistId}: ButtonsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodolistFilterAC({todolistId, filter: 'All'})),[dispatch, todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodolistFilterAC({todolistId, filter: 'Active'})),[dispatch, todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodolistFilterAC({todolistId, filter: 'Completed'})),[dispatch, todolistId]);\r\n\r\n\r\n    return (\r\n        <div className={s.buttons_block}>\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onAllClickHandler}\r\n                title={'All'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onActiveClickHandler}\r\n                title={'Active'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onCompletedClickHandler}\r\n                title={'Completed'}\r\n            />\r\n        </div>\r\n    );\r\n};","import {todolistsAPI, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskEntityStatusAC,\r\n    removeTaskAC,\r\n    setTasksAC,\r\n    updateTaskAC\r\n} from \"../Redux-Store/tasks-reducer\";\r\nimport {AppRootStateType} from \"../Redux-Store/store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\nimport {changeTodolistEntityStatusAC} from \"../Redux-Store/todolists-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Error-urils\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const getTasksTC = (todolistId: string) => async (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n    try {\r\n        const response = await todolistsAPI.getTasks(todolistId);\r\n        if (response.data.error === null) {\r\n            let tasks = response.data.items.map(el => ({...el, entityTaskStatus: 'idle' as RequestStatusType}));\r\n            dispatch(setTasksAC({tasks, todolistId}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}\r\n\r\n// export const updateTaskTC = createAsyncThunk<\r\n//     unknown,\r\n//     {todolistId: string, taskId: string, domainModel: UpdateTaskModelType},\r\n//     { dispatch: Dispatch, state: AppRootStateType , getState: () => AppRootStateType}\r\n//     >(\r\n//     'upadate/Task',\r\n//     async ({todolistId, taskId, domainModel}, {dispatch, getState}) => {\r\n//\r\n//         dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'loading'}));\r\n//         dispatch(setAppStatusAC({status: 'loading'}));\r\n//\r\n//         const allTasksFromState = getState().tasksReducer;\r\n//         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n//         const task = tasksForCurrentTodolist.find(t => t.id === taskId);\r\n//\r\n//         if (task) {\r\n//             const apiModel = {\r\n//                 title: task.title,\r\n//                 startDate: task.startDate,\r\n//                 priority: task.priority,\r\n//                 description: task.description,\r\n//                 deadline: task.deadline,\r\n//                 status: task.status,\r\n//                 ...domainModel\r\n//             };\r\n//\r\n//             try {\r\n//                 const response = await todolistsAPI.updateTask(todolistId, taskId, apiModel);\r\n//                 if (response.data.resultCode === 0) {\r\n//                     dispatch(updateTaskAC({taskId, todolistId, model: response.data.data.item}));\r\n//                     dispatch(setAppStatusAC({status: 'succeeded'}));\r\n//                     dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'succeeded'}));\r\n//                 } else {\r\n//                     handleServerAppError(response.data, dispatch);\r\n//                     dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'failed'}));\r\n//                 }\r\n//             } catch (error) {\r\n//                 if (error instanceof Error) {\r\n//                     handleServerNetworkError(error, dispatch);\r\n//                     dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'failed'}));\r\n//                 }\r\n//             }\r\n//         }\r\n//\r\n//     }\r\n// );\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateTaskModelType) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'loading'}));\r\n        dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n        const allTasksFromState = getState().tasksReducer;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId);\r\n\r\n        if (task) {\r\n            const apiModel = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel\r\n            };\r\n\r\n            try {\r\n                const response = await todolistsAPI.updateTask(todolistId, taskId, apiModel);\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskId, todolistId, model: response.data.data.item}));\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}));\r\n                    dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'succeeded'}));\r\n                } else {\r\n                    handleServerAppError(response.data, dispatch);\r\n                    dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'failed'}));\r\n                }\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    handleServerNetworkError(error, dispatch);\r\n                    dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'failed'}));\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => async (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n    dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'loading'}));\r\n\r\n    try {\r\n        const response = await todolistsAPI.deleteTask(todolistId, taskId);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(removeTaskAC({taskId, todolistId}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'failed'}));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTaskEntityStatusAC({todolistId, taskId, entityStatus: 'failed'}));\r\n        }\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n\r\n    dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'loading'}));\r\n    dispatch(setAppStatusAC({status: 'loading'}));\r\n\r\n    try {\r\n        const response = await todolistsAPI.createTask(todolistId, title);\r\n        if (response.data.resultCode === 0) {\r\n            let task = {...response.data.data.item, entityTaskStatus: 'idle' as RequestStatusType};\r\n            dispatch(addTaskAC({todolistId, task}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'failed'}));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC({todolistId, entityStatus: 'failed'}));\r\n        }\r\n    }\r\n}","import React, {memo, useCallback, useEffect} from 'react';\r\nimport s from \"./Todolist.module.css\";\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../RenameSpanFunc/EditableSpan';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from '../Task/Task';\r\nimport {TaskStatuses} from '../../api/todolists-api';\r\nimport {FilterValuesType} from '../../Redux-Store/todolists-reducer';\r\nimport {Buttons} from \"../Buttons/Buttons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTodolistTC, updateTodolistTC} from \"../../Thunk/Todolist-thunk\";\r\nimport {createTaskTC, getTasksTC, removeTaskTC, updateTaskTC} from \"../../Thunk/Task-thunk\";\r\nimport {RequestStatusType} from \"../../Redux-Store/App-reducer\";\r\nimport {TaskTypeWithStatusEntity} from \"../../Types/TaskType\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskTypeWithStatusEntity>\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    }, [])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    const removeTodolist = useCallback(function () {\r\n        dispatch(removeTodolistTC(props.id));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeTodolistTitle = useCallback(function (title: string) {\r\n        dispatch(updateTodolistTC(props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string) {\r\n        dispatch(createTaskTC(props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {title: newTitle}));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={s.main_paper_div}>\r\n            <h3 className={s.block_name_and_delete}>\r\n                <EditableSpan disabled={props.entityStatus === 'loading'} value={props.title}\r\n                              onChange={changeTodolistTitle}/>\r\n                <IconButton size={\"large\"} onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask} color={'secondary'} disabled={props.entityStatus === 'loading'}/>\r\n\r\n            <div className={s.tasks_block}>\r\n                    {\r\n                        tasksForTodolist.map(t => <Task key={t.id}\r\n                                                        task={t}\r\n                                                        todolistId={props.id}\r\n                                                        removeTask={removeTask}\r\n                                                        changeTaskTitle={changeTaskTitle}\r\n                                                        changeTaskStatus={changeStatus}\r\n                        />)\r\n                    }\r\n            </div>\r\n\r\n            <Buttons todolistId={props.id} filterBS={props.filter}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './SmallApp.css';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from \"../../Redux-Store/store\";\r\nimport {InitialStateTodolistDomainType} from \"../../Redux-Store/todolists-reducer\";\r\nimport {TasksStateType} from \"../../Redux-Store/tasks-reducer\";\r\nimport {initialStateAuthorizationType} from \"../../Redux-Store/Authorization-reducer\";\r\nimport {AppInitialStateType} from \"../../Redux-Store/App-reducer\";\r\nimport {createTodolistTC, getTodolistsTC} from \"../../Thunk/Todolist-thunk\";\r\nimport {LogOutTC} from \"../../Thunk/Auth-thunk\";\r\nimport {ProgressBar} from \"../ProgressBar/ProgressBar\";\r\nimport {Snackbars} from \"../SnackBar/SnackBar\";\r\nimport {Header} from \"../Header/Header\";\r\nimport {Todolist} from \"../Todolist/Todolist\";\r\nimport {Fade} from \"react-awesome-reveal\";\r\nimport {AuthRedirect} from \"../../Utils/FunctionUtils/Redirect\";\r\n\r\nexport const SmallApp = AuthRedirect(() => {\r\n\r\n    const todolists = useAppSelector<Array<InitialStateTodolistDomainType>>(state => state.todolistsReducer);\r\n    const tasks = useAppSelector<TasksStateType>(state => state.tasksReducer);\r\n    const {login} = useAppSelector<initialStateAuthorizationType>(state => state.AuthorizationReducer);\r\n    const {status} = useAppSelector<AppInitialStateType>(state => state.AppReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC());\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch]);\r\n    const onClickHandler = () => dispatch(LogOutTC());\r\n\r\n    return (\r\n        <>\r\n            <Header login={login} addTodolist={addTodolist} onClickHandler={onClickHandler} status={status}/>\r\n            <div className=\"App\">\r\n\r\n                {/*Tools*/}\r\n                <div className=\"progress_bar_padding\">\r\n                    {status === 'loading' && <ProgressBar/>}\r\n                </div>\r\n                <Snackbars typeError={'error'}/>\r\n                {/*End Tools*/}\r\n\r\n                <div className={\"MainContainer\"}>\r\n                    <Grid container style={{width: \"100%\", padding: '20px'}}>\r\n                        <Grid container spacing={7}>\r\n                            {\r\n                                todolists.map(tl => {\r\n                                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                                    return <Grid item key={tl.id}>\r\n                                        <Paper elevation={3}\r\n                                               style={{ padding: '20px', borderRadius: \"10px\", backgroundColor: \"#ffffffa6\" }}>\r\n                                            <Fade cascade>\r\n                                                <Todolist\r\n                                                    id={tl.id}\r\n                                                    title={tl.title}\r\n                                                    tasks={allTodolistTasks}\r\n                                                    filter={tl.filter}\r\n                                                    entityStatus={tl.entityStatus}\r\n                                                />\r\n                                            </Fade>\r\n                                        </Paper>\r\n                                    </Grid>\r\n                                })\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport s from \"./Loading.module.css\";\r\n\r\nexport const Loading = () => {\r\n    return (\r\n        <div className={s.main_loading}>\r\n            <div className={s.loader}>\r\n                <span/>\r\n                <span/>\r\n                <span/>\r\n                <span/>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from './Redux-Store/store';\r\nimport {AuthMeTC} from \"./Thunk/Auth-thunk\";\r\nimport {LoginPage} from \"./Components/LoginPage/LoginPage\";\r\nimport {SmallApp} from \"./Components/SmallApp/SmallApp\";\r\nimport {Loading} from \"./Utils/Loding/Loading\";\r\nimport {Routes, Route, Navigate} from \"react-router-dom\";\r\nimport {AppInitialStateType} from \"./Redux-Store/App-reducer\";\r\n\r\nexport const App = () => {\r\n\r\n    const { isFetching } = useAppSelector<AppInitialStateType>(state => state.AppReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMeTC());\r\n    }, []);\r\n\r\n    if (isFetching) return <Loading/>\r\n\r\n    return  (\r\n        <>\r\n            <Routes>\r\n                {/* Standard value */}\r\n                <Route path={\"/\"} element={ <Navigate to={'/app'}/> } />\r\n                <Route path={\"*\"} element={ <Navigate to={\"/404\"}/> } />\r\n\r\n                <Route path={\"/login\"} element={ <LoginPage/> } />\r\n                <Route path={\"/app\"} element={ <SmallApp/> } />\r\n                <Route path={\"/404\"} element={ <h1>404 Page not found</h1> } />\r\n            </Routes>\r\n        </>\r\n    )\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './Redux-Store/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_3\":\"SignIn_form_3__2SSkU\",\"button\":\"SignIn_button__3DwEz\",\"label_rememberMe_block\":\"SignIn_label_rememberMe_block__lLv1A\",\"clearfix\":\"SignIn_clearfix__2yBzH\",\"register\":\"SignIn_register__XS3YG\",\"text_helper\":\"SignIn_text_helper__wRuGl\",\"angle\":\"SignIn_angle__1tSts\",\"text_helper_small_text\":\"SignIn_text_helper_small_text__31epX\",\"error_block\":\"SignIn_error_block__3QK1B\",\"main_login\":\"SignIn_main_login__23Wdz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_paper_div\":\"Todolist_main_paper_div__1EygI\",\"block_name_and_delete\":\"Todolist_block_name_and_delete__a3zMX\",\"add_item_form\":\"Todolist_add_item_form__kUhT1\",\"tasks_block\":\"Todolist_tasks_block__2US_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background_block_login_page\":\"LoginPage_background_block_login_page__39MEE\",\"block_login_page\":\"LoginPage_block_login_page__1-jxa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_loading\":\"Loading_main_loading__erV71\",\"loader\":\"Loading_loader__1A0mq\",\"span-1\":\"Loading_span-1__3G6uj\",\"span-2\":\"Loading_span-2__yWwgY\",\"span-3\":\"Loading_span-3__1yV3R\",\"span-4\":\"Loading_span-4__3f_h8\"};"],"sourceRoot":""}