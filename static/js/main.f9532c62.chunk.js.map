{"version":3,"sources":["Components/Task/Task.module.css","Redux-Store/tasks-reducer.ts","Redux-Store/todolists-reducer.ts","Redux-Store/Authorization-reducer.ts","Redux-Store/App-reducer.ts","Redux-Store/store.ts","api/todolists-api.ts","Utils/Error-urils.ts","Components/SignIn/SignIn.tsx","Thunk/Auth-thunk.ts","Components/SnackBar/SnackBar.tsx","Components/LoginPage/LoginPage.tsx","Components/ProgressBar/ProgressBar.tsx","Components/AddItemForm/AddItemForm.tsx","Components/Header/Header.tsx","Components/RenameSpanFunc/EditableSpan.tsx","Components/Task/Task.tsx","Components/Buttons/Button.tsx","Components/Buttons/Buttons.tsx","Thunk/Task-thunk.ts","Components/Todolist/Todolist.tsx","Thunk/Todolist-thunk.ts","Components/AppIsAuth/SmallApp.tsx","Utils/Loding/Loading.tsx","App.tsx","reportWebVitals.ts","index.tsx","Components/SignIn/SignIn.module.css","Components/Todolist/Todolist.module.css","Components/LoginPage/LoginPage.module.css","Utils/Loding/Loading.module.css"],"names":["module","exports","initialState","setTasksAC","tasks","todolistId","type","removeTaskAC","taskId","updateTaskAC","model","changeTaskEntityStatusAC","entityStatus","removeTodolistAC","id","addTodolistAC","title","changeTodolistTitleAC","changeTodolistFilterAC","filter","changeTodolistEntityStatusAC","SET_USER_DATA","SET_FETCHING","initialStateAuthorization","login","email","isFetching","isAuth","setAuthUserDataAC","payload","setIsFetchingAC","APP_SET_STATUS","SET_APP_ERROR","status","error","setAppStatusAC","setAppErrorMessageAC","rootReducer","combineReducers","state","action","stateCopy","todolists","forEach","tl","copyState","t","task","todoListId","map","entityTaskStatus","addedDate","order","AuthorizationReducer","AppReducer","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","window","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","delete","put","AuthAPI","then","response","data","password","rememberMe","captcha","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","SignIn","props","useDispatch","registrationForm","useFormik","initialValues","validate","values","errors","test","onSubmit","a","responseAuthMe","resultCode","console","log","LoginTC","resetForm","passwordOne","mustContainData","toLowerCase","toUpperCase","className","s","main_login","modal_wrapper","modal_window","form_3","handleSubmit","style","color","clearfix","htmlFor","placeholder","getFieldProps","error_block","touched","fontSize","text_helper","angle","text_helper_small_text","width","height","label_rememberMe_block","button","name","value","disabled","isValid","dirty","MustContainItem","label","meetsReq","classArr","push","join","setClass","Snackbars","typeError","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","Alert","React","forwardRef","ref","elevation","variant","LoginPage","background_block_login_page","block_login_page","ProgressBar","Box","LinearProgress","AddItemForm","memo","addItem","useState","setTitle","setError","addItems","trim","display","TextField","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","size","onClick","Header","onClickHandler","addTodolist","AppBar","position","Toolbar","Typography","component","flexGrow","Button","EditableSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","onDoubleClick","Task","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","is_done","Checkbox","Delete","CleanButton","activeButton","Buttons","filterBS","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","updateTaskTC","domainModel","getState","allTasksFromState","tasksForCurrentTodolist","find","apiModel","startDate","priority","description","deadline","item","Error","Todolist","useEffect","itemsWithStatus","items","el","tasksForTodolist","removeTodolist","changeTodolistTitle","updateTodolistTC","removeTaskTC","addTask","createTaskTC","changeStatus","newTitle","main_paper_div","block_name_and_delete","add_item_form","paddingTop","SmallApp","createTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","borderRadius","backgroundColor","Loading","main_loading","loader","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,wB,2ICsBtBC,EAA+B,GA6CxBC,EAAa,SAACC,EAAwCC,GAAzC,MAAiE,CAACC,KAAM,YAAaF,QAAOC,eACzGE,EAAe,SAACC,EAAgBH,GAAjB,MAAyC,CAACC,KAAM,cAAeE,OAAQA,EAAQH,WAAYA,IAE1GI,EAAe,SAACD,EAAgBH,EAAoBK,GAArC,MAAqE,CAACJ,KAAM,cAAeD,aAAYG,SAAQE,UAC9HC,EAA2B,SAACN,EAAoBG,EAAgBI,GAArC,MAA0E,CAACN,KAAM,4BAA6BE,SAAQH,aAAYO,iBCrDpKV,EAA0C,GA8BnCW,EAAmB,SAACR,GAAD,MAAyB,CAACC,KAAM,kBAAmBQ,GAAIT,IAC1EU,EAAgB,SAACC,EAAeX,GAAhB,MAAwC,CAACC,KAAM,eAAgBU,MAAOA,EAAOX,eAC7FY,EAAwB,SAACH,EAAYE,GAAb,MAAgC,CAACV,KAAM,wBAAyBQ,GAAIA,EAAIE,MAAOA,IACvGE,EAAyB,SAACJ,EAAYK,GAAb,MAA2C,CAACb,KAAM,yBAA0BQ,GAAIA,EAAIK,OAAQA,IACrHC,EAA+B,SAACN,EAAYF,GAAb,MAAkD,CAACN,KAAM,gCAAiCQ,KAAIF,iB,iBCrDpIS,EAAgB,gBAClBC,EAAe,eAgBfC,EAA2D,CAC3DT,GAAI,KACJU,MAAO,KACPC,MAAO,KACPC,YAAY,EACZC,QAAQ,GAoBCC,EAAoB,SAACC,GAC9B,MAAO,CAACvB,KAAMe,EAAeQ,YAEpBC,EAAkB,SAACJ,GAC5B,MAAO,CAACpB,KAAMgB,EAAcI,eCnC1BK,EAAiB,iBACjBC,EAAgB,gBAEhB9B,EAAoC,CACtC+B,OAAQ,YACRC,MAAO,MAcEC,EAAiB,SAACF,GAAD,MAAgC,CAAC3B,KAAMyB,EAAgBE,WACxEG,EAAuB,SAACF,GAAD,MAA2B,CAAC5B,KAAM0B,EAAeE,UCrB/EG,EAAcC,YAAgB,CAChClC,MJmBwB,WAAoF,IAAnFmC,EAAkF,uDAA1DrC,EAAcsC,EAA4C,uCAC3G,OAAQA,EAAOlC,MACX,IAAK,gBACD,IAAMmC,EAAS,eAAOF,GAItB,OAHAC,EAAOE,UAAUC,SAAQ,SAACC,GACtBH,EAAUG,EAAG9B,IAAM,MAEhB2B,EAEX,IAAK,eACD,OAAO,2BAAIF,GAAX,kBAAmBC,EAAOnC,WAAa,KAE3C,IAAK,kBACD,IAAMwC,EAAS,eAAON,GAEtB,cADOM,EAAUL,EAAO1B,IACjB+B,EAEX,IAAK,YACD,OAAO,2BAAIN,GAAX,kBAAmBC,EAAOnC,WAAamC,EAAOpC,QAElD,IAAK,cACD,OAAO,2BAAImC,GAAX,kBAAmBC,EAAOnC,WAAakC,EAAMC,EAAOnC,YAAYc,QAAO,SAAA2B,GAAC,OAAIA,EAAEhC,KAAO0B,EAAOhC,YAEhG,IAAK,WACD,OAAO,2BAAI+B,GAAX,kBAAmBC,EAAOO,KAAKC,WAA/B,CAA6CR,EAAOO,MAApD,mBAA6DR,EAAMC,EAAOO,KAAKC,gBAEnF,IAAK,cACD,OAAO,2BAAIT,GAAX,kBAAmBC,EAAOnC,WAAakC,EAAMC,EAAOnC,YAAY4C,KAAI,SAAAH,GAAC,OAAIA,EAAEhC,KAAO0B,EAAOhC,OAAhB,2BAA6BsC,GAAMN,EAAO9B,OAASoC,OAEhI,IAAK,4BACD,OAAO,2BAAIP,GAAX,kBAAmBC,EAAOnC,WAAakC,EAAMC,EAAOnC,YAAY4C,KAAI,SAAAH,GAAC,OAAIA,EAAEhC,KAAO0B,EAAOhC,OAAhB,2BAA6BsC,GAA7B,IAAgCI,iBAAkBV,EAAO5B,eAAgBkC,OAEtJ,QACI,OAAOP,IInDfG,UHW4B,WAA+G,IAA9GH,EAA6G,uDAA1ErC,EAAcsC,EAA4D,uCAC1I,OAAQA,EAAOlC,MACX,IAAK,gBACD,OAAOkC,EAAOE,UAAUO,KAAI,SAAAL,GAAE,kCAASA,GAAT,IAAahC,aAAc,OAAQO,OAAQ,WAE7E,IAAK,kBACD,OAAOoB,EAAMpB,QAAO,SAAAyB,GAAE,OAAIA,EAAG9B,KAAO0B,EAAO1B,MAE/C,IAAK,eACD,MAAM,CAAE,CAAEA,GAAI0B,EAAOnC,WAAYW,MAAOwB,EAAOxB,MAAOJ,aAAc,OAAQO,OAAQ,MAAOgC,UAAW,GAAIC,MAAO,IAAjH,mBAAwHb,IAE5H,IAAK,wBACD,OAAOA,EAAMU,KAAI,SAAAL,GAAE,OAAIA,EAAG9B,KAAO0B,EAAO1B,GAAjB,2BAA0B8B,GAA1B,IAA8B5B,MAAOwB,EAAOxB,QAAS4B,KAEhF,IAAK,yBACD,OAAOL,EAAMU,KAAI,SAAAL,GAAE,OAAIA,EAAG9B,KAAO0B,EAAO1B,GAAjB,2BAA0B8B,GAA1B,IAA8BzB,OAAQqB,EAAOrB,SAAUyB,KAElF,IAAK,gCACD,OAAOL,EAAMU,KAAI,SAAAL,GAAE,OAAIA,EAAG9B,KAAO0B,EAAO1B,GAAjB,2BAA0B8B,GAA1B,IAA8BhC,aAAc4B,EAAO5B,eAAgBgC,KAE9F,QACI,OAAOL,IG/Bfc,qBFYgC,WAA+F,IAA9Fd,EAA6F,uDAArFhB,EAA2BiB,EAA0D,uCAC9H,OAAQA,EAAOlC,MACX,KAAKe,EACD,OAAO,2BACAkB,GACAC,EAAOX,SAEd,KAAKP,EACL,OAAO,2BACAiB,GADP,IAEIb,WAAYc,EAAOd,aAE3B,QACI,OAAOa,IExBfe,WDKsB,WAAwE,IAAvEf,EAAsE,uDAA9DrC,EAAcsC,EAAgD,uCAC7F,OAAQA,EAAOlC,MACX,KAAKyB,EACD,OAAO,2BAAIQ,GAAX,IAAkBN,OAAQO,EAAOP,SACrC,KAAKD,EACD,OAAO,2BAAIO,GAAX,IAAkBL,MAAOM,EAAON,QACpC,QACI,OAAOK,MCPNgB,EAAQC,YAAYnB,EAAaoB,YAAgBC,MAWjDC,EAAyDC,IAItEC,OAAON,MAAQA,E,ICiDHO,EAOAC,E,kCAtFNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAKTtD,GACX,OAAOgD,EAASQ,KAA6E,aAAc,CAACxD,WANvGsD,EAAe,SASTxD,GACX,OAAOkD,EAASS,OAAT,qBAA4C3D,KAV9CwD,EAAe,SAaTxD,EAAYE,GACvB,OAAOgD,EAASU,IAAT,qBAA2E5D,GAAM,CAACE,WAdpFsD,EAAe,SAiBfjE,GACL,OAAO2D,EAASO,IAAT,qBAA6ClE,EAA7C,YAlBFiE,EAAe,SAqBbjE,EAAoBG,GAC3B,OAAOwD,EAASS,OAAT,qBAA4CpE,EAA5C,kBAAgEG,KAtBlE8D,EAAe,SAyBbjE,EAAoBW,GAC3B,OAAOgD,EAASQ,KAAT,qBAAgGnE,EAAhG,UAAoH,CAACW,WA1BvHsD,EAAe,SA6BbjE,EAAoBG,EAAgBE,GAC3C,OAAOsD,EAASU,IAAT,qBAAiGrE,EAAjG,kBAAqHG,GAAUE,IAMjIiE,EAAU,WAEf,OAAOX,EAASO,IAAT,WACFK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BH,EAAU,WAOf,OAAOX,EAASS,OAAT,eACFG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAR1BH,GAAU,SAWZlD,EAAesD,EAAkBC,EAAqBC,GACzD,OAAOjB,EAASQ,KAAT,cAA+F,CAAC/C,QAAOsD,WAAUC,aAAYC,YAC/HL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,SAqB3BhB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC/EL,IAAMmB,GAAuB,SAAIJ,EAAuBK,GACvDL,EAAKM,SAASC,OACdF,EAAS/C,EAAqB0C,EAAKM,SAAS,KAE5CD,EAAS/C,EAAqB,wBAElC+C,EAAShD,EAAe,YAGfmD,GAA2B,SAACpD,EAA0BiD,GAC/DA,EAAS/C,EAAqBF,EAAMqD,UACpCJ,EAAShD,EAAe,Y,sCC2GbqD,GApHA,SAACC,GAEZ,IAAMN,EAAWO,cAEXC,EAAmBC,aAAU,CAC/BC,cAAe,CAACpE,MAAO,GAAIsD,SAAU,GAAIC,YAAY,EAAOC,SAAS,GACrEa,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOtE,MAEA,4CAA4CwE,KAAKF,EAAOtE,SAChEuE,EAAOvE,MAAQ,yBAFfuE,EAAOvE,MAAQ,oBAIdsE,EAAOhB,SAEDgB,EAAOhB,SAASM,OAAS,IAChCW,EAAOjB,SAAW,oBAFlBiB,EAAOjB,SAAW,uBAIfiB,GAEXE,SAAU,SAACH,GACPZ,ECAW,SAACY,GAAD,8CAAgG,WAAMZ,GAAN,yBAAAgB,EAAA,sEAC5FxB,GAAcoB,EAAOtE,MAAOsE,EAAOhB,SAAUgB,EAAOf,WAAWe,EAAOd,SADsB,cAC7GJ,EAD6G,gBAEtFF,IAFsF,OAE7GyB,EAF6G,OAGvF,IAAxBvB,EAASwB,aACbC,QAAQC,IAAI1B,GADmB,EAEFuB,EAAetB,KAAnCtD,EAFsB,EAEtBA,MAAOC,EAFe,EAEfA,MAAOX,EAFQ,EAERA,GACnBqE,EAASvD,EAAkB,CAACd,KAAIW,QAAOD,QAAOG,QAAQ,MANyD,2CAAhG,sDDAF6E,CAAQT,IACjBJ,EAAiBc,eAInBC,EAAcf,EAAiBI,OAAOhB,SACtC4B,EAAkB,CACpB,CAAC,wFAAmBD,EAAYE,gBAAkBF,GAClD,CAAC,kFAAkBA,EAAYG,gBAAkBH,GACjD,CAAC,iCAAS,KAAKT,KAAKS,IACpB,CAAC,qDAAcA,EAAYrB,QAAU,IAGzC,OACI,sBAAKyB,UAAWC,KAAEC,WAAlB,SACI,sBAAKF,UAAWC,KAAEE,cAAlB,SACI,sBAAKH,UAAWC,KAAEG,aAAlB,SACI,wBAAMJ,UAAWC,KAAEI,OAAQjB,SAAUP,EAAiByB,aAAtD,UAEI,qBAAIC,MAAO,CAACC,MAAO,SAAnB,2BAEA,qBAAGR,UAAWC,KAAEQ,SAAhB,UACI,wBAAOC,QAAQ,QAAf,mBACA,oCACIlH,KAAK,QACLQ,GAAG,QACH2G,YAAY,SACR9B,EAAiB+B,cAAc,WAEvC,sBAAKZ,UAAWC,KAAEY,YAAlB,SACKhC,EAAiBiC,QAAQnG,OAASkE,EAAiBK,OAAOvE,MACvD,sBACI4F,MAAO,CAACC,MAAO,MAAOO,SAAU,UADpC,SACgDlC,EAAiBK,OAAOvE,QACxE,UAIZ,qBAAGqF,UAAWC,KAAEQ,SAAhB,UACI,wBAAOC,QAAQ,WAAf,sBACA,oCACIlH,KAAK,WACLQ,GAAG,WACH2G,YAAY,YACR9B,EAAiB+B,cAAc,cAEvC,sBAAKZ,UAAWC,KAAEY,YAAlB,SACKhC,EAAiBiC,QAAQ7C,UAAYY,EAAiBK,OAAOjB,SAC1D,sBAAKsC,MAAO,CACRC,MAAO,MACPO,SAAU,UAFd,SAGIlC,EAAiBK,OAAOjB,WAC5B,OAEPY,EAAiBI,OAAOhB,SACrB,uBAAK+B,UAAWC,KAAEe,YAAlB,UACI,sBAAKhB,UAAWC,KAAEgB,QAClB,oOACA,sBAAKjB,UAAWC,KAAEiB,uBAAlB,SACKrB,EAAgB1D,KAAI,SAAC6B,GAAD,OACjB,eAAC,GAAD,CAA4BA,KAAMA,GAAZA,WAIlC,QAGR,qBAAGgC,UAAWC,KAAEQ,SAAhB,UACI,oCACIF,MAAO,CAACY,MAAO,OAAQC,OAAQ,QAC/B5H,KAAK,WACLQ,GAAG,YACC6E,EAAiB+B,cAAc,gBAEvC,wBAAOF,QAAQ,WAAWV,UAAWC,KAAEoB,uBAAvC,yBAIA,yBACIrB,UAAWC,KAAEqB,OACb9H,KAAK,SACL+H,KAAK,SACLC,MAAM,SACNC,WAAY5C,EAAiB6C,SAAW7C,EAAiB8C,OAL7D,iCAqBtBC,GAAkB,SAACjD,GAAgB,IAC9BX,EAAQW,EAARX,KACD6D,EAAQ7D,EAAK,GACb8D,EAAW9D,EAAK,GAQtB,OACI,uBAAMuC,MAAO,CAACQ,SAAU,QAAxB,SACF,uBAAKf,UAAW,oBAAhB,UACE,gCAAO6B,IACP,sBAAK7B,UAVQ,WACb,IAAM+B,EAAW,CAAC,gBAElB,OADID,GAAUC,EAASC,KAAK,cACrBD,EAASE,KAAK,KAOLC,W,wCEtIXC,GAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,UAEfhH,EAAU0B,aAAmD,SAAArB,GAAK,OAAIA,EAAMe,cAA5EpB,MACFiD,EAAWO,cAEXyD,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJlE,EAAS/C,EAAqB,QAGlC,OACI,eAACkH,GAAA,EAAD,CAAUC,KAAgB,OAAVrH,EAAgBsH,iBAAkB,IAAMC,QAASN,EAAaO,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAA9H,SACI,gBAAC,GAAD,CAAOH,QAASN,EAAaU,SAAUX,EAAWY,GAAI,CAAC7B,MAAO,QAA9D,UACK/F,EADL,sBAUN6H,GAAQC,IAAMC,YAAuC,SACvDxE,EAAOyE,GACP,OAAO,eAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,UAAa3E,OClCrD4E,GAAY,WACrB,OACI,sBAAKvD,UAAWC,KAAEuD,4BAAlB,SACI,uBAAKxD,UAAWC,KAAEwD,iBAAlB,UACI,eAAC,GAAD,CAAWrB,UAAW,UACtB,eAAC,GAAD,U,gDCPHsB,GAAc,WACvB,OACI,eAACC,GAAA,EAAD,CAAKX,GAAI,CAAE7B,MAAO,QAAlB,SACI,eAACyC,GAAA,EAAD,CAAgBpD,MAAO,iB,4DCKtBqD,GAAcX,IAAMY,MAAK,YAA6D,IAAlDrC,EAAiD,EAAjDA,SAAUsC,EAAuC,EAAvCA,QAASvD,EAA8B,EAA9BA,MAA8B,EAEtEwD,mBAAS,IAF6D,oBAEzF9J,EAFyF,KAElF+J,EAFkF,OAGtED,mBAAwB,MAH8C,oBAGzF5I,EAHyF,KAGlF8I,EAHkF,KAKxFC,EAAW,WACQ,KAAjBjK,EAAMkK,QACNL,EAAQ7J,GACR+J,EAAS,KAETC,EAAS,sBAiBjB,OACI,uBAAK3D,MAAO,CAAC8D,QAAS,QAAtB,UACI,eAACC,GAAA,EAAD,CACI7C,SAAUA,EACV6B,QAAQ,WACRlI,QAASA,EACToG,MAAOtH,EACPsG,MAAOA,EACP+D,SArBY,SAACC,GACrBP,EAASO,EAAEC,cAAcjD,QAqBjBkD,WAlBc,SAACF,GACT,OAAVpJ,GACA8I,EAAS,MAEC,UAAVM,EAAEG,KACFR,KAcItC,MAAM,QACN+C,WAAYxJ,IAEhB,eAACyJ,GAAA,EAAD,CAAYrE,MAAM,UAAUsE,KAAM,QAASC,QAASZ,EAAU1C,SAAUA,EAAxE,SACI,eAAC,KAAD,CAAoBlB,MAAO,CAACY,MAAO,OAAQC,OAAQ,QAASZ,MAAO,oB,8BCrCtEwE,GAAS,SAAC,GAAgE,IAA9D7J,EAA6D,EAA7DA,OAAQT,EAAqD,EAArDA,MAAOuK,EAA8C,EAA9CA,eAAgBC,EAA8B,EAA9BA,YACpD,OACI,eAACC,GAAA,EAAD,CAAQC,SAAU,SAAU5E,MAAO,YAAaD,MAAO,CAACa,OAAQ,SAAhE,SACI,gBAACiE,GAAA,EAAD,WACI,sBAAKrF,UAAW,UAAhB,SACI,eAAC6D,GAAD,CAAaE,QAASmB,EAAa1E,MAAO,OAAQiB,SAAqB,YAAXtG,IAAwB,MAGxF,eAACmK,GAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,MAAMvC,GAAI,CAACwC,SAAU,GAAIxF,UAAW,oBAAvE,wCAIA,qBAAIA,UAAW,aAAf,SAA8BtF,IAC9B,eAAC+K,GAAA,EAAD,CAAQV,QAASE,EAAgBzE,MAAM,QAAQ8C,QAAQ,YAAvD,0B,oBCnBHoC,GAAexC,IAAMY,MAAK,YAA+D,IAApDtC,EAAmD,EAAnDA,MAAO+C,EAA4C,EAA5CA,SAAU9C,EAAkC,EAAlCA,SAAkC,EAEnEuC,oBAAS,GAF0D,oBAE5F2B,EAF4F,KAElFC,EAFkF,OAGzE5B,mBAASxC,GAHgE,oBAG5FtH,EAH4F,KAGrF+J,EAHqF,KAS3F4B,EAAmB,WACrBD,GAAY,GACZrB,EAASrK,IAWb,OAAOyL,EACD,eAACrB,GAAA,EAAD,CACE7C,SAAUA,EACViD,WATkB,SAACF,GACT,UAAVA,EAAEG,KACFkB,KAQArE,MAAOtH,EACPqK,SAdY,SAACC,GACjBP,EAASO,EAAEC,cAAcjD,QAcrBsE,WAAS,EAACC,OAAQF,EAClBvC,QAAS,aAEX,uBAAM0C,cA1Ba,WACrBJ,GAAY,GACZ3B,EAASzC,IAwBP,SAAwCA,O,yCCxBrCyE,GAAO/C,IAAMY,MAAK,SAACnF,GAC5B,IAAMsG,EAAiBiB,uBAAY,kBAAMvH,EAAMwH,WAAWxH,EAAM1C,KAAKjC,GAAI2E,EAAMpF,cAAa,CAACoF,EAAM1C,KAAKjC,GAAI2E,EAAMpF,aAE5G6M,EAAkBF,uBAAY,SAAC1B,GACjC,IAAI6B,EAAiB7B,EAAEC,cAAc6B,QACrC3H,EAAM4H,iBAAiB5H,EAAM1C,KAAKjC,GAAIqM,EAAiBrJ,EAAawJ,UAAYxJ,EAAayJ,IAAK9H,EAAMpF,cACzG,CAACoF,EAAM1C,KAAKjC,GAAI2E,EAAMpF,aAEnBmN,EAAuBR,uBAAY,SAACS,GACtChI,EAAMiI,gBAAgBjI,EAAM1C,KAAKjC,GAAI2M,EAAUhI,EAAMpF,cACtD,CAACoF,EAAM1C,KAAKjC,GAAI2E,EAAMpF,aAEnBkI,EAA2C,YAAhC9C,EAAM1C,KAAKG,iBAE5B,OAAO,uBAAyB4D,UAAWrB,EAAM1C,KAAKd,SAAW6B,EAAawJ,UAAYvG,KAAE4G,QAAU,GAA/F,UACH,eAACC,GAAA,EAAD,CACIR,QAAS3H,EAAM1C,KAAKd,SAAW6B,EAAawJ,UAC5ChG,MAAM,YACN+D,SAAU6B,IAGd,eAACV,GAAD,CAAcjE,SAAUA,EAAUD,MAAO7C,EAAM1C,KAAK/B,MAAOqK,SAAUmC,IACrE,eAAC7B,GAAA,EAAD,CAAYE,QAASE,EAAgBxD,SAAUA,EAA/C,SACI,eAACsF,GAAA,EAAD,QATSpI,EAAM1C,KAAKjC,OCpBlBgN,GAAc,SAAC,GAA4D,IAA3D9M,EAA0D,EAA1DA,MAAO+K,EAAmD,EAAnDA,eAAgBgC,EAAmC,EAAnCA,aACjD,OACI,eAACxB,GAAA,EAAD,CACIjF,MAAgC,YAChC8C,QAAS2D,IAAiB/M,EAAQ,YAAc,WAChD6K,QAASE,EAHb,SAIK/K,KCNAgN,GAAU,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,SAAU5N,EAA6B,EAA7BA,WAEzB8E,EAAWO,cAEXwI,EAAoBlB,uBAAY,kBAAM7H,EAASjE,EAAuBb,EAAY,UAAQ,CAAC8E,EAAU9E,IACrG8N,EAAuBnB,uBAAY,kBAAM7H,EAASjE,EAAuBb,EAAY,aAAW,CAAC8E,EAAU9E,IAC3G+N,EAA0BpB,uBAAY,kBAAM7H,EAASjE,EAAuBb,EAAY,gBAAc,CAAC8E,EAAU9E,IAGvH,OACI,iCACI,eAAC,GAAD,CACI0N,aAAcE,EACdlC,eAAgBmC,EAChBlN,MAAO,QAEX,eAAC,GAAD,CACI+M,aAAcE,EACdlC,eAAgBoC,EAChBnN,MAAO,WAEX,eAAC,GAAD,CACI+M,aAAcE,EACdlC,eAAgBqC,EAChBpN,MAAO,kBCTVqN,GAAe,SAAChO,EAAoBG,EAAgB8N,GAArC,8CACxB,WAAOnJ,EAAUoJ,GAAjB,uBAAApI,EAAA,yDACIhB,EAASxE,EAAyBN,EAAYG,EAAQ,YACtD2E,EAAShD,EAAe,YAElBqM,EAAoBD,IAAWnO,MAC/BqO,EAA0BD,EAAkBnO,KAC5C0C,EAAO0L,EAAwBC,MAAK,SAAA5L,GAAC,OAAIA,EAAEhC,KAAON,MAN5D,wBAScmO,EATd,aAUY3N,MAAO+B,EAAK/B,MACZ4N,UAAW7L,EAAK6L,UAChBC,SAAU9L,EAAK8L,SACfC,YAAa/L,EAAK+L,YAClBC,SAAUhM,EAAKgM,SACf9M,OAAQc,EAAKd,QACVqM,GAhBf,mBAoBmChK,EAAwBjE,EAAYG,EAAQmO,GApB/E,QAqB6C,KAD3B9J,EApBlB,QAqByBC,KAAKuB,YACdlB,EAAS1E,EAAaD,EAAQH,EAAYwE,EAASC,KAAKA,KAAKkK,OAC7D7J,EAAShD,EAAe,cACxBgD,EAASxE,EAAyBN,EAAYG,EAAQ,gBAEtD0E,GAAqBL,EAASC,KAAMK,GACpCA,EAASxE,EAAyBN,EAAYG,EAAQ,YA3BtE,kDA8BgB,gBAAiByO,QACjB3J,GAAyB,EAAD,GAAQH,GAChCA,EAASxE,EAAyBN,EAAYG,EAAQ,YAhCtE,0DADwB,yDCDf0O,GAAWtE,gBAAK,SAAUnF,GAEnC,IAAMN,EAAWO,cAEjByJ,qBAAU,WDrBY,IAAC9O,ECsBnB8E,GDtBmB9E,ECsBCoF,EAAM3E,GDtBR,uCAAkC,WAAMqE,GAAN,iBAAAgB,EAAA,6DAExDhB,EAAShD,EAAe,YAFgC,kBAK7BmC,EAAsBjE,GALO,OAMxB,QADtBwE,EAL8C,QAMvCC,KAAK5C,QACVkN,EAAkBvK,EAASC,KAAKuK,MAAMpM,KAAI,SAAAqM,GAAE,kCAASA,GAAT,IAAapM,iBAAkB,YAC/EiC,EAAShF,EAAWiP,EAAiB/O,IACrC8E,EAAShD,EAAe,eATwB,gDAYhD,gBAAiB8M,OACjB3J,GAAyB,EAAD,GAAQH,GAbgB,yDAAlC,0DCuBnB,IAEH,IAAIoK,EAAmB9J,EAAMrF,MAER,WAAjBqF,EAAMtE,SACNoO,EAAmB9J,EAAMrF,MAAMe,QAAO,SAAA2B,GAAC,OAAIA,EAAEb,SAAW6B,EAAayJ,QAEpD,cAAjB9H,EAAMtE,SACNoO,EAAmB9J,EAAMrF,MAAMe,QAAO,SAAA2B,GAAC,OAAIA,EAAEb,SAAW6B,EAAawJ,cAIzE,IAAMkC,EAAiBxC,uBAAY,WCWP,IAAC3M,EDVzB8E,GCUyB9E,EDVCoF,EAAM3E,GCUR,uCAAkC,WAAMqE,GAAN,eAAAgB,EAAA,6DAE9DhB,EAAS/D,EAA8Bf,EAAY,YACnD8E,EAAShD,EAAe,YAHsC,kBAMnCmC,EAA4BjE,GANO,OAOzB,KAD3BwE,EANoD,QAO7CC,KAAKuB,YACdlB,EAAStE,EAAiBR,IAC1B8E,EAAShD,EAAe,cACxBgD,EAAS/D,EAA8Bf,EAAY,gBAEnD6E,GAAqBL,EAASC,KAAMK,GACpCA,EAAS/D,EAA6Bf,EAAY,YAbI,gDAgBtD,gBAAiB4O,QACjB3J,GAAyB,EAAD,GAAQH,GAChCA,EAAS/D,EAA6Bf,EAAY,YAlBI,yDAAlC,0DDTzB,CAAC8E,EAAUM,EAAM3E,KAEd2O,EAAsBzC,uBAAY,SAAUhM,GAC9CmE,ECjBwB,SAAC9E,EAAoBW,GAArB,8CAAiD,WAAMmE,GAAN,eAAAgB,EAAA,6DAE7EhB,EAAShD,EAAe,YACxBgD,EAAS/D,EAA8Bf,EAAY,YAH0B,kBAMlDiE,EAA4BjE,EAAYW,GANU,OAOxC,KAD3B6D,EANmE,QAO5DC,KAAKuB,YACdlB,EAASlE,EAAsBZ,EAAYW,IAC3CmE,EAAShD,EAAe,cACxBgD,EAAS/D,EAA8Bf,EAAY,gBAEnD6E,GAAqBL,EAASC,KAAMK,GACpCA,EAAS/D,EAA6Bf,EAAY,YAbmB,gDAgBrE,gBAAiB4O,QACjB3J,GAAyB,EAAD,GAAQH,GAChCA,EAAS/D,EAA6Bf,EAAY,YAlBmB,yDAAjD,sDDiBfqP,CAAiBjK,EAAM3E,GAAIE,MACrC,CAACmE,EAAUM,EAAM3E,KAEdmM,EAAaD,uBAAY,SAAUxM,EAAgBH,GACrD8E,EDeoB,SAAC9E,EAAoBG,GAArB,8CAAkD,WAAM2E,GAAN,eAAAgB,EAAA,6DAE1EhB,EAAShD,EAAe,YACxBgD,EAASxE,EAAyBN,EAAYG,EAAQ,YAHoB,kBAM/C8D,EAAwBjE,EAAYG,GANW,OAOrC,KAD3BqE,EANgE,QAOzDC,KAAKuB,YACdlB,EAAS5E,EAAaC,EAAQH,IAC9B8E,EAAShD,EAAe,cACxBgD,EAASxE,EAAyBN,EAAYG,EAAQ,gBAEtD0E,GAAqBL,EAASC,KAAMK,GACpCA,EAASxE,EAAyBN,EAAYG,EAAQ,YAbY,gDAgBlE,gBAAiByO,QACjB3J,GAAyB,EAAD,GAAQH,GAChCA,EAASxE,EAAyBN,EAAYG,EAAQ,YAlBY,yDAAlD,sDCfXmP,CAAatP,EAAYG,MACnC,CAAC2E,IAEEyK,EAAU5C,uBAAY,SAAUhM,GAClCmE,EDkCoB,SAAC9E,EAAoBW,GAArB,8CAAiD,WAAMmE,GAAN,iBAAAgB,EAAA,6DAEzEhB,EAAS/D,EAA6Bf,EAAY,YAClD8E,EAAShD,EAAe,YAHiD,kBAM9CmC,EAAwBjE,EAAYW,GANU,OAOpC,KAD3B6D,EAN+D,QAOxDC,KAAKuB,YACV+I,EAD4B,2BACNvK,EAASC,KAAKA,KAAKkK,MADb,IACmB9L,iBAAkB,SACrEiC,ElB5BsE,CAAC7E,KAAM,WAAYyC,KkB4B1DqM,IAC/BjK,EAAShD,EAAe,cACxBgD,EAAS/D,EAA6Bf,EAAY,gBAElD6E,GAAqBL,EAASC,KAAMK,GACpCA,EAAS/D,EAA6Bf,EAAY,YAde,gDAiBjE,gBAAiB4O,QACjB3J,GAAyB,EAAD,GAAQH,GAChCA,EAAS/D,EAA6Bf,EAAY,YAnBe,yDAAjD,sDClCXwP,CAAapK,EAAM3E,GAAIE,MACjC,CAACmE,EAAUM,EAAM3E,KAEdgP,EAAe9C,uBAAY,SAAUxM,EAAgByB,EAAsB5B,GAC7E8E,EAASkJ,GAAahO,EAAYG,EAAQ,CAACyB,cAC5C,CAACkD,IAEEuI,EAAkBV,uBAAY,SAAUxM,EAAgBuP,EAAkB1P,GAC5E8E,EAASkJ,GAAahO,EAAYG,EAAQ,CAACQ,MAAO+O,OACnD,CAAC5K,IAEJ,OACI,uBAAK2B,UAAWC,KAAEiJ,eAAlB,UAEI,sBAAIlJ,UAAWC,KAAEkJ,sBAAjB,UACI,eAACzD,GAAD,CAAcjE,SAAiC,YAAvB9C,EAAM7E,aAA4B0H,MAAO7C,EAAMzE,MAAOqK,SAAUoE,IACxF,eAAC9D,GAAA,EAAD,CAAYC,KAAM,QAASC,QAAS2D,EAAgBjH,SAAiC,YAAvB9C,EAAM7E,aAApE,SACI,eAACiN,GAAA,EAAD,SAIR,sBAAK/G,UAAWC,KAAEmJ,cAAlB,SACI,eAACvF,GAAD,CAAaE,QAAS+E,EAAStI,MAAO,YAAaiB,SAAiC,YAAvB9C,EAAM7E,iBAEvE,+BAEQ2O,EAAiBtM,KAAI,SAAAH,GAAC,OAAI,eAACiK,GAAD,CACMhK,KAAMD,EACNzC,WAAYoF,EAAM3E,GAClBmM,WAAYA,EACZS,gBAAiBA,EACjBL,iBAAkByC,GALbhN,EAAEhC,SAS/C,sBAAKuG,MAAO,CAAC8I,WAAY,QAAzB,SACI,eAAC,GAAD,CAAS9P,WAAYoF,EAAM3E,GAAImN,SAAUxI,EAAMtE,iBE1ElDiP,GAAW,WAEpB,IAAM1N,EAAYiB,GAA0C,SAAApB,GAAK,OAAIA,EAAMG,aACrEtC,EAAQuD,GAA+B,SAAApB,GAAK,OAAIA,EAAMnC,SACpDoB,EAAUmC,GAA8C,SAAApB,GAAK,OAAIA,EAAMc,wBAAvE7B,MACAS,EAAW0B,GAAoC,SAAApB,GAAK,OAAIA,EAAMe,cAA9DrB,OACFkD,EAAWO,cAEjByJ,qBAAU,WACNhK,EDbsB,uCAAgB,WAAMA,GAAN,eAAAgB,EAAA,6DAE1ChB,EAAShD,EAAe,YAFkB,kBAKfmC,IALe,OAMd,OADlBO,EALgC,QAMzB5C,SACTkD,EnB4BuD,CAAC7E,KAAM,gBAAiBoC,UmB5BvDmC,EAASC,OACjCK,EAAShD,EAAe,eARU,gDAWlC,gBAAiB8M,OACjB3J,GAAyB,EAAD,GAAQH,GAZE,yDAAhB,yDCcvB,IAEH,IAAM6G,EAAcgB,uBAAY,SAAChM,GAAmBmE,ED+CxB,SAACnE,GAAD,8CAA6B,WAAMmE,GAAN,eAAAgB,EAAA,6DAEzDhB,EAAShD,EAAe,YAFiC,kBAK9BmC,EAA4BtD,GALE,OAMpB,KAD3B6D,EAL+C,QAMxCC,KAAKuB,YACdlB,EAASpE,EAAcC,EAAO6D,EAASC,KAAKA,KAAKkK,KAAKlO,KACtDqE,EAAShD,EAAe,eAExB+C,GAAqBL,EAASC,KAAMK,GAVa,gDAajD,gBAAiB8J,OACjB3J,GAAyB,EAAD,GAAQH,GAdiB,yDAA7B,sDC/CiCkL,CAAiBrP,MAAU,CAACmE,IAGzF,OACI,uBAAK2B,UAAU,MAAf,UACI,eAAC,GAAD,CAAQtF,MAAOA,EAAOwK,YAAaA,EAAaD,eAJjC,kBAAM5G,EbHT,uCAAgB,WAAMA,GAAN,SAAAgB,EAAA,sEACbxB,IADa,OAER,IAFQ,OAEvB0B,YACTlB,EAASvD,EAAkB,CAACd,GAAI,KAAMW,MAAO,KAAMD,MAAO,KAAMG,QAAQ,KAHxC,2CAAhB,wDaOoEM,OAAQA,IAGxF,sBAAK6E,UAAU,uBAAf,SAAkD,YAAX7E,GAAwB,eAAC,GAAD,MAC/D,eAAC,GAAD,CAAWiH,UAAW,UAEtB,sBAAKpC,UAAW,gBAAhB,SACI,eAACwJ,GAAA,EAAD,CAAMC,WAAS,EAAClJ,MAAO,CAACY,MAAO,OAAQuI,QAAS,QAAhD,SACI,eAACF,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQ/N,EAAUO,KAAI,SAAAL,GACV,IAAI8N,EAAmBtQ,EAAMwC,EAAG9B,IAEhC,OAAO,eAACwP,GAAA,EAAD,CAAMtB,MAAI,EAAV,SACH,eAAC2B,GAAA,EAAD,CAAOxG,UAAW,EACX9C,MAAO,CACHmJ,QAAS,OACTI,aAAc,OACdC,gBAAiB,aAJ5B,SAMI,eAAC3B,GAAD,CACIpO,GAAI8B,EAAG9B,GACPE,MAAO4B,EAAG5B,MACVZ,MAAOsQ,EACPvP,OAAQyB,EAAGzB,OACXP,aAAcgC,EAAGhC,kBAZNgC,EAAG9B,iB,oBC5C7CgQ,GAAU,WACnB,OACI,sBAAKhK,UAAWC,KAAEgK,aAAlB,SACI,uBAAKjK,UAAWC,KAAEiK,OAAlB,UACI,0BACA,0BACA,0BACA,gCCDHC,GAAM,WAAO,IAAD,EAEQtN,GAA8C,SAAApB,GAAK,OAAIA,EAAMc,wBAAnF1B,EAFc,EAEdA,OAAQD,EAFM,EAENA,WACTyD,EAAWO,cAMjB,OAJAyJ,qBAAU,WACNhK,EfTgB,uCAAgB,WAAMA,GAAN,uBAAAgB,EAAA,6DAEpChB,EAASrD,GAAgB,IAFW,kBAKT6C,IALS,OAMJ,KADtBE,EAL0B,QAMnBwB,aAAmB,EACHxB,EAASC,KAA7BtD,EADsB,EACtBA,MAAOC,EADe,EACfA,MAAOX,EADQ,EACRA,GACnBqE,EAASvD,EAAkB,CAACd,KAAIW,QAAOD,QAAOG,QAAQ,MAR1B,gDAY5B,gBAAiBsN,OACjB3J,GAAyB,EAAD,GAAQH,GAbJ,yBAiBhCA,EAASrD,GAAgB,IAjBO,4EAAhB,yDeUjB,IAGC,uCACKJ,GAAc,eAAC,GAAD,IAEVC,EAEK,eAAC,GAAD,IADA,eAAC,GAAD,QCTPuP,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxM,MAAK,YAAkD,IAA/CyM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,UCAdO,IAASC,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,KAAD,UACI,eAAC,IAAD,CAAUrO,MAAOA,EAAjB,SACI,eAAC,GAAD,UAIZsO,SAASC,eAAe,SAM5BZ,M,mBCtBAlR,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,uBAAuB,uBAAyB,uCAAuC,SAAW,yBAAyB,SAAW,yBAAyB,YAAc,4BAA4B,MAAQ,sBAAsB,uBAAyB,uCAAuC,YAAc,8B,mBCAhXD,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,sBAAwB,wCAAwC,cAAgB,kC,mBCApJD,EAAOC,QAAU,CAAC,4BAA8B,+CAA+C,iBAAmB,sC,mBCAlHD,EAAOC,QAAU,CAAC,aAAe,8BAA8B,OAAS,wBAAwB,SAAS,wBAAwB,SAAS,wBAAwB,SAAS,wBAAwB,SAAS,0B","file":"static/js/main.f9532c62.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__3JDJx\"};","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TaskType, UpdateTaskModelType} from '../api/todolists-api';\r\nimport {RequestStatusType} from \"./App-reducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskTypeWithStatusEntity>\r\n}\r\n\r\nexport type TaskTypeWithStatusEntity = TaskType & {\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport type TaskActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | SetTodolistsActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low, entityTaskStatus: \"idle\" },\r\n    ]*/\r\n};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.todolistId]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)};\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]};\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)};\r\n        }\r\n        case 'CHANGE_TASK_ENTITY_STATUS': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, entityTaskStatus: action.entityStatus} : t)};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setTasksAC = (tasks: Array<TaskTypeWithStatusEntity>, todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId} as const );\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const);\r\nexport const addTaskAC = (todolistId: string, task: TaskTypeWithStatusEntity) => ({type: 'ADD-TASK', task } as const );\r\nexport const updateTaskAC = (taskId: string, todolistId: string, model: UpdateTaskModelType) => ({type: 'UPDATE-TASK', todolistId, taskId, model} as const );\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType) => ({type: 'CHANGE_TASK_ENTITY_STATUS', taskId, todolistId, entityStatus} as const );\r\n\r\n","import { TodolistType } from '../api/todolists-api';\r\nimport {RequestStatusType} from \"./App-reducer\";\r\n\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\nexport type TodolistsActionsType =\r\n    | SetTodolistsActionType\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0}*/\r\n];\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({...tl, entityStatus: 'idle', filter: 'All'}))\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{ id: action.todolistId, title: action.title, entityStatus: 'idle', filter: 'All', addedDate: '', order: 0}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'CHANGE_TODOLIST_ENTITY_STATUS': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const );\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const );\r\nexport const addTodolistAC = (title: string, todolistId: string) => ({type: 'ADD-TODOLIST', title: title, todolistId} as const );\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const );\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const );\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({type: 'CHANGE_TODOLIST_ENTITY_STATUS', id, entityStatus} as const );\r\n","const SET_USER_DATA = \"SET_USER_DATA\",\r\n    SET_FETCHING = \"SET_FETCHING\";\r\n\r\nexport type AuthActionType = ReturnType<typeof setIsFetchingAC> | ReturnType<typeof setAuthUserDataAC>;\r\ntype DataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n};\r\nexport type initialStateAuthorizationType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n};\r\nlet initialStateAuthorization: initialStateAuthorizationType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n};\r\n\r\nexport const AuthorizationReducer = (state = initialStateAuthorization, action: AuthActionType): initialStateAuthorizationType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA :\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n            case SET_FETCHING :\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserDataAC = (payload: DataType) => {\r\n    return {type: SET_USER_DATA, payload} as const\r\n}\r\nexport const setIsFetchingAC = (isFetching: boolean) => {\r\n    return {type: SET_FETCHING, isFetching} as const\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type SetAppErrorMessageActionType = ReturnType <typeof setAppErrorMessageAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type AppActionsType =\r\n    | SetAppErrorMessageActionType\r\n    | SetAppStatusActionType;\r\nexport type AppInitialStateType = {\r\n    status: RequestStatusType\r\n    error: null | string\r\n};\r\n\r\nconst APP_SET_STATUS = \"APP_SET_STATUS\",\r\n      SET_APP_ERROR = \"SET_APP_ERROR\";\r\n\r\nconst initialState: AppInitialStateType = {\r\n    status: 'succeeded',\r\n    error: null,\r\n}\r\n\r\nexport const AppReducer = (state = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case APP_SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case SET_APP_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: APP_SET_STATUS, status} as const );\r\nexport const setAppErrorMessageAC = (error: string | null) => ({type: SET_APP_ERROR, error} as const );\r\n","import {TaskActionsType, tasksReducer} from './tasks-reducer';\r\nimport {TodolistsActionsType, todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {AuthActionType, AuthorizationReducer} from \"./Authorization-reducer\";\r\nimport {AppActionsType, AppReducer} from \"./App-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    AuthorizationReducer,\r\n    AppReducer,\r\n})\r\n\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n\r\n\r\nexport type AppGlobalActionsType = TaskActionsType | TodolistsActionsType | AuthActionType | AppActionsType;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppGlobalActionsType> ;\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;   // optimazed UseSelector\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import axios, { AxiosResponse } from 'axios'\r\nimport {AuthRequestType, ResponseGetAuthType} from \"../Types/AythTypes\";\r\nimport {RequestStatusType} from \"../Redux-Store/App-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '46d03c13-5122-4b12-95a1-e807d8a6bece'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n}\r\n\r\n\r\n\r\nexport const AuthAPI = {\r\n    AuthUser () {\r\n        return instance.get<ResponseGetAuthType>(`auth/me`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    LogOut () {\r\n        return instance.delete<ResponseType>(`auth/login/`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    Login (email: string, password: string, rememberMe: boolean, captcha: boolean) {\r\n        return instance.post<AuthRequestType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login/`, {email, password, rememberMe, captcha})\r\n            .then(response => response.data);\r\n    },\r\n}\r\n\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\nimport {setAppErrorMessageAC, setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\nimport {SetAppStatusActionType} from \"../Redux-Store/App-reducer\";\r\nimport {SetAppErrorMessageActionType} from \"../Redux-Store/App-reducer\";\r\n\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorMessageActionType | SetAppStatusActionType>;\r\n\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorMessageAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorMessageAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorMessageAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import React from \"react\";\r\nimport s from \"./SignIn.module.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {LoginTC} from \"../../Thunk/Auth-thunk\";\r\n\r\ntype SignInType = {};\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe?: boolean\r\n};\r\n\r\nconst SignIn = (props: SignInType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const registrationForm = useFormik({\r\n        initialValues: {email: \"\", password: \"\", rememberMe: false, captcha: true},\r\n        validate: (values: FormikErrorType) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password is required\";\r\n            } else if (values.password.length < 4) {\r\n                errors.password = \"Invalid password\";\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(LoginTC(values));\r\n            registrationForm.resetForm();\r\n        },\r\n    });\r\n\r\n    const passwordOne = registrationForm.values.password;\r\n    const mustContainData = [\r\n        [\"заглавную букву\", passwordOne.toLowerCase() !== passwordOne],\r\n        [\"строчную букву\", passwordOne.toUpperCase() !== passwordOne],\r\n        [\"цифру\", /\\d/.test(passwordOne)],\r\n        [\"5 символов\", passwordOne.length >= 4],\r\n    ];\r\n\r\n    return (\r\n        <div className={s.main_login}>\r\n            <div className={s.modal_wrapper}>\r\n                <div className={s.modal_window}>\r\n                    <form className={s.form_3} onSubmit={registrationForm.handleSubmit}>\r\n\r\n                        <h1 style={{color: \"white\"}}>Account login</h1>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                id=\"email\"\r\n                                placeholder=\"email\"\r\n                                {...registrationForm.getFieldProps(\"email\")}\r\n                            />\r\n                            <div className={s.error_block}>\r\n                                {registrationForm.touched.email && registrationForm.errors.email ? (\r\n                                    <div\r\n                                        style={{color: \"red\", fontSize: \"1.2rem\"}}>{registrationForm.errors.email}</div>\r\n                                ) : null}\r\n                            </div>\r\n                        </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                placeholder=\"password\"\r\n                                {...registrationForm.getFieldProps(\"password\")}\r\n                            />\r\n                            <div className={s.error_block}>\r\n                                {registrationForm.touched.password && registrationForm.errors.password ? (\r\n                                    <div style={{\r\n                                        color: \"red\",\r\n                                        fontSize: \"1.2rem\"\r\n                                    }}>{registrationForm.errors.password}</div>\r\n                                ) : null}\r\n                            </div>\r\n                            {registrationForm.values.password  ? (\r\n                                <div className={s.text_helper}>\r\n                                    <div className={s.angle}/>\r\n                                    <span>Пароль должен содержать как минимум:</span>\r\n                                    <div className={s.text_helper_small_text}>\r\n                                        {mustContainData.map((data) => (\r\n                                            <MustContainItem key={data} data={data}/>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            ) : null}\r\n                        </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <input\r\n                                style={{width: \"50px\", height: \"50px\"}}\r\n                                type=\"checkbox\"\r\n                                id=\"remember\"\r\n                                {...registrationForm.getFieldProps(\"rememberMe\")}\r\n                            />\r\n                            <label htmlFor=\"remember\" className={s.label_rememberMe_block}>\r\n                                Remember me\r\n                            </label>\r\n\r\n                            <button\r\n                                className={s.button}\r\n                                type=\"submit\"\r\n                                name=\"submit\"\r\n                                value=\"Submit\"\r\n                                disabled={!(registrationForm.isValid && registrationForm.dirty)}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </p>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SignIn;\r\n\r\n\r\nconst MustContainItem = (props: any) => {\r\n    const {data} = props;\r\n    const label = data[0];\r\n    const meetsReq = data[1];\r\n\r\n    const setClass = () => {\r\n        const classArr = [\"invalidStyle\"]; //invalid logo img\r\n        if (meetsReq) classArr.push(\"validStyle\"); //valid logo img\r\n        return classArr.join(\" \");\r\n    };\r\n\r\n    return (\r\n        <span style={{fontSize: \"1rem\"}}>\r\n      <div className={\"validateChecklist\"}>\r\n        <span>{label}</span>\r\n        <div className={setClass()}/>\r\n      </div>\r\n    </span>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import {AppThunk} from \"../Redux-Store/store\";\r\nimport {setAuthUserDataAC, setIsFetchingAC} from \"../Redux-Store/Authorization-reducer\";\r\nimport {AuthAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Error-urils\";\r\nimport {changeTaskEntityStatusAC} from \"../Redux-Store/tasks-reducer\";\r\n\r\nexport const AuthMeTC = (): AppThunk => async dispatch => {\r\n\r\n    dispatch(setIsFetchingAC(true));\r\n\r\n    try {\r\n        const response = await AuthAPI.AuthUser()\r\n        if (response.resultCode === 0) {\r\n            let {login, email, id} = response.data\r\n            dispatch(setAuthUserDataAC({id, email, login, isAuth: true}))\r\n        }\r\n    }\r\n    catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n    finally {\r\n        dispatch(setIsFetchingAC(false));\r\n    }\r\n}\r\n\r\nexport const LogOutTC = (): AppThunk => async dispatch => {\r\n    const response = await AuthAPI.LogOut()\r\n    if (response.resultCode === 0) {\r\n        dispatch(setAuthUserDataAC({id: null, email: null, login: null, isAuth: false}))\r\n    }\r\n}\r\n\r\nexport const LoginTC = (values: {email: string, password: string, rememberMe: boolean, captcha: boolean}): AppThunk => async dispatch => {\r\n    const response = await AuthAPI.Login(values.email, values.password, values.rememberMe,values.captcha);\r\n    const responseAuthMe = await AuthAPI.AuthUser();\r\n    if (response.resultCode === 0) {\r\n    console.log(response)\r\n        let {login, email, id} = responseAuthMe.data;\r\n        dispatch(setAuthUserDataAC({id, email, login, isAuth: true}))\r\n    }\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux-Store/store\";\r\nimport {AppInitialStateType, setAppErrorMessageAC} from \"../../Redux-Store/App-reducer\";\r\n\r\ntype TypeErrorSnackbars = 'error' | 'warning';\r\n\r\ntype SnackbarsType = {\r\n  typeError:  TypeErrorSnackbars\r\n};\r\n\r\nexport const Snackbars = ({typeError}: SnackbarsType) => {\r\n\r\n    const { error } = useSelector<AppRootStateType, AppInitialStateType>(state => state.AppReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorMessageAC(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'center'}}>\r\n            <Alert onClose={handleClose} severity={typeError} sx={{width: '100%'}}>\r\n                {error} 😠\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});","import React from 'react';\r\nimport SignIn from \"../SignIn/SignIn\";\r\nimport s from \"./LoginPage.module.css\";\r\nimport {Snackbars} from \"../SnackBar/SnackBar\";\r\n\r\nexport const LoginPage = () => {\r\n    return (\r\n        <div className={s.background_block_login_page}>\r\n            <div className={s.block_login_page}>\r\n                <Snackbars typeError={'error'}/>\r\n                <SignIn/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Box, LinearProgress} from \"@mui/material\";\r\n\r\nexport const ProgressBar = () => {\r\n    return (\r\n        <Box sx={{ width: '100%' }} >\r\n            <LinearProgress color={\"secondary\"} />\r\n        </Box>\r\n    );\r\n};","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddBoxOutlinedIcon from '@mui/icons-material/AddBoxOutlined';\r\n\r\ntype AddItemFormPropsType = {\r\n    color: 'info' | 'secondary'\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({disabled, addItem, color}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItems = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItems();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{display: \"flex\"}}>\r\n            <TextField\r\n                disabled={disabled}\r\n                variant=\"outlined\"\r\n                error={!!error}\r\n                value={title}\r\n                color={color}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label=\"Title\"\r\n                helperText={error}\r\n            />\r\n            <IconButton color=\"inherit\" size={\"large\"} onClick={addItems} disabled={disabled}>\r\n                <AddBoxOutlinedIcon style={{width: \"30px\", height: \"30px\"}} color={'inherit'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport '../AppIsAuth/SmallApp.css';\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {Button, Typography} from \"@mui/material\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport {RequestStatusType} from \"../../Redux-Store/App-reducer\";\r\n\r\ntype HeaderType = {\r\n    status: RequestStatusType\r\n    addTodolist: (title: string) => void\r\n    onClickHandler: () => void\r\n    login: string | null\r\n}\r\n\r\nexport const Header = ({ status, login, onClickHandler, addTodolist }: HeaderType) => {\r\n    return (\r\n        <AppBar position={\"static\"} color={\"secondary\"} style={{height: \"100px\"}}>\r\n            <Toolbar>\r\n                <div className={\"AddItem\"}>\r\n                    <AddItemForm addItem={addTodolist} color={\"info\"} disabled={status === 'loading' && true}/>\r\n                </div>\r\n\r\n                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}} className={\"global_todo_title\"}>\r\n                    Todolist for your business\r\n                </Typography>\r\n\r\n                <h3 className={\"Login_name\"}>{login}</h3>\r\n                <Button onClick={onClickHandler} color=\"error\" variant=\"contained\">LogOut</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    disabled?: boolean\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({value, onChange, disabled}: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode();\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            disabled={disabled}\r\n            onKeyPress={onKeyPressHandler}\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus onBlur={activateViewMode}\r\n            variant={\"standard\"}/>\r\n\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport s from \"./Task.module.css\";\r\nimport {EditableSpan} from '../RenameSpanFunc/EditableSpan'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {TaskTypeWithStatusEntity} from \"../../Redux-Store/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskTypeWithStatusEntity\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const disabled = props.task.entityTaskStatus === 'loading' ;\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.is_done : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan disabled={disabled} value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} disabled={disabled}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {FilterValuesType} from \"../../Redux-Store/todolists-reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    activeButton: FilterValuesType\r\n}\r\n\r\nexport const  CleanButton = ({title, onClickHandler, activeButton}: ButtonPropsType) => {\r\n    return (\r\n        <Button\r\n            color={activeButton === title ? \"secondary\" : \"secondary\"}\r\n            variant={activeButton === title ? \"contained\" : \"outlined\"}\r\n            onClick={onClickHandler}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CleanButton} from \"./Button\";\r\nimport {changeTodolistFilterAC, FilterValuesType} from \"../../Redux-Store/todolists-reducer\";\r\n\r\ntype ButtonsType = {\r\n    todolistId: string\r\n    filterBS: FilterValuesType\r\n}\r\n\r\nexport const Buttons = ({filterBS, todolistId}: ButtonsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'All')),[dispatch, todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'Active')),[dispatch, todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'Completed')),[dispatch, todolistId]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onAllClickHandler}\r\n                title={'All'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onActiveClickHandler}\r\n                title={'Active'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onCompletedClickHandler}\r\n                title={'Completed'}\r\n            />\r\n        </div>\r\n    );\r\n};","import {todolistsAPI, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {addTaskAC, changeTaskEntityStatusAC, removeTaskAC, setTasksAC, updateTaskAC} from \"../Redux-Store/tasks-reducer\";\r\nimport {AppRootStateType, AppThunk} from \"../Redux-Store/store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\nimport {changeTodolistEntityStatusAC} from \"../Redux-Store/todolists-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Error-urils\";\r\n\r\nexport const getTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.getTasks(todolistId);\r\n        if (response.data.error === null) {\r\n            let itemsWithStatus = response.data.items.map(el => ({...el, entityTaskStatus: 'idle' as RequestStatusType}));\r\n            dispatch(setTasksAC(itemsWithStatus, todolistId));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateTaskModelType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'));\r\n        dispatch(setAppStatusAC('loading'));\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId);\r\n\r\n        if (task) {\r\n            const apiModel = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel\r\n            };\r\n\r\n            try {\r\n                const response = await todolistsAPI.updateTask(todolistId, taskId, apiModel);\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, todolistId, response.data.data.item));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'succeeded'));\r\n                } else {\r\n                    handleServerAppError(response.data, dispatch);\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'));\r\n                }\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    handleServerNetworkError(error, dispatch);\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'));\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.deleteTask(todolistId, taskId);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'succeeded'));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'));\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.createTask(todolistId, title);\r\n        if (response.data.resultCode === 0) {\r\n            let itemsWithStatus = {...response.data.data.item, entityTaskStatus: 'idle' as RequestStatusType };\r\n            dispatch(addTaskAC(todolistId, itemsWithStatus));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    }\r\n}","import React, {memo, useCallback, useEffect} from 'react'\r\nimport s from \"./Todolist.module.css\";\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../RenameSpanFunc/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from '../Task/Task'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {FilterValuesType} from '../../Redux-Store/todolists-reducer'\r\nimport {Buttons} from \"../Buttons/Buttons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTodolistTC, updateTodolistTC} from \"../../Thunk/Todolist-thunk\";\r\nimport {createTaskTC, getTasksTC, removeTaskTC, updateTaskTC} from \"../../Thunk/Task-thunk\";\r\nimport {RequestStatusType} from \"../../Redux-Store/App-reducer\";\r\nimport {TaskTypeWithStatusEntity} from \"../../Redux-Store/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskTypeWithStatusEntity>\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    }, [])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    const removeTodolist = useCallback(function () {\r\n        dispatch(removeTodolistTC(props.id));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeTodolistTitle = useCallback(function (title: string) {\r\n        dispatch(updateTodolistTC(props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string) {\r\n        dispatch(createTaskTC(props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {title: newTitle}));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={s.main_paper_div}>\r\n\r\n            <h3 className={s.block_name_and_delete}>\r\n                <EditableSpan disabled={props.entityStatus === 'loading'} value={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton size={\"large\"} onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <div className={s.add_item_form}>\r\n                <AddItemForm addItem={addTask} color={'secondary'} disabled={props.entityStatus === 'loading'}/>\r\n            </div>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task key={t.id}\r\n                                                    task={t}\r\n                                                    todolistId={props.id}\r\n                                                    removeTask={removeTask}\r\n                                                    changeTaskTitle={changeTaskTitle}\r\n                                                    changeTaskStatus={changeStatus}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: '10px'}}>\r\n                <Buttons todolistId={props.id} filterBS={props.filter}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import {todolistsAPI} from \"../api/todolists-api\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC\r\n} from \"../Redux-Store/todolists-reducer\";\r\nimport {AppThunk} from \"../Redux-Store/store\";\r\nimport {setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Error-urils\";\r\nimport {removeTaskAC} from \"../Redux-Store/tasks-reducer\";\r\n\r\nexport const getTodolistsTC = (): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.getTodolists();\r\n        if (response.status === 200) {\r\n            dispatch(setTodolistsAC(response.data));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTodolistTC = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n    dispatch(changeTodolistEntityStatusAC( todolistId, 'loading' ));\r\n\r\n    try {\r\n        const response = await todolistsAPI.updateTodolist(todolistId, title);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(changeTodolistTitleAC(todolistId, title));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(changeTodolistEntityStatusAC( todolistId, 'succeeded' ));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(changeTodolistEntityStatusAC( todolistId, 'loading' ));\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.deleteTodolist(todolistId);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(removeTodolistAC(todolistId));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(changeTodolistEntityStatusAC( todolistId, 'succeeded' ));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const createTodolistTC = (title: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.createTodolist(title);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(addTodolistAC(title, response.data.data.item.id));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './SmallApp.css';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from \"../../Redux-Store/store\";\r\nimport {TodolistDomainType} from \"../../Redux-Store/todolists-reducer\";\r\nimport {TasksStateType} from \"../../Redux-Store/tasks-reducer\";\r\nimport {initialStateAuthorizationType} from \"../../Redux-Store/Authorization-reducer\";\r\nimport {AppInitialStateType} from \"../../Redux-Store/App-reducer\";\r\nimport {createTodolistTC, getTodolistsTC} from \"../../Thunk/Todolist-thunk\";\r\nimport {LogOutTC} from \"../../Thunk/Auth-thunk\";\r\nimport {ProgressBar} from \"../ProgressBar/ProgressBar\";\r\nimport {Snackbars} from \"../SnackBar/SnackBar\";\r\nimport {Header} from \"../Header/Header\";\r\nimport {Todolist} from \"../Todolist/Todolist\";\r\n\r\nexport const SmallApp = () => {\r\n\r\n    const todolists = useAppSelector<Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useAppSelector<TasksStateType>(state => state.tasks);\r\n    const { login } = useAppSelector<initialStateAuthorizationType>(state => state.AuthorizationReducer);\r\n    const { status } = useAppSelector<AppInitialStateType>(state => state.AppReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC());\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {dispatch(createTodolistTC(title))}, [dispatch]);\r\n    const onClickHandler = () => dispatch(LogOutTC());\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header login={login} addTodolist={addTodolist} onClickHandler={onClickHandler} status={status}/>\r\n\r\n            {/*Tools*/}\r\n            <div className=\"progress_bar_padding\">{status === 'loading' && <ProgressBar />}</div>\r\n            <Snackbars typeError={'error'}/>\r\n\r\n            <div className={\"MainContainer\"}>\r\n                <Grid container style={{width: \"100%\", padding: '40px'}}>\r\n                    <Grid container spacing={7}>\r\n                        {\r\n                            todolists.map(tl => {\r\n                                let allTodolistTasks = tasks[tl.id];\r\n\r\n                                return <Grid item key={tl.id}>\r\n                                    <Paper elevation={3}\r\n                                           style={{\r\n                                               padding: '20px',\r\n                                               borderRadius: \"10px\",\r\n                                               backgroundColor: \"#ffffffa6\"\r\n                                           }}>\r\n                                        <Todolist\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={allTodolistTasks}\r\n                                            filter={tl.filter}\r\n                                            entityStatus={tl.entityStatus}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            })\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from \"./Loading.module.css\";\r\n\r\nexport const Loading = () => {\r\n    return (\r\n        <div className={s.main_loading}>\r\n            <div className={s.loader}>\r\n                <span/>\r\n                <span/>\r\n                <span/>\r\n                <span/>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from './Redux-Store/store';\r\nimport {initialStateAuthorizationType} from \"./Redux-Store/Authorization-reducer\";\r\nimport {AuthMeTC} from \"./Thunk/Auth-thunk\";\r\nimport {LoginPage} from \"./Components/LoginPage/LoginPage\";\r\nimport {SmallApp} from \"./Components/AppIsAuth/SmallApp\";\r\nimport {Loading} from \"./Utils/Loding/Loading\";\r\n\r\nexport const App = () => {\r\n\r\n    const {isAuth, isFetching} = useAppSelector<initialStateAuthorizationType>(state => state.AuthorizationReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMeTC());\r\n    }, []);\r\n\r\n    return  (\r\n        <>\r\n            {isFetching && <Loading />}\r\n            {\r\n                !isAuth\r\n                    ? <LoginPage />\r\n                    : <SmallApp />\r\n            }\r\n        </>\r\n    )\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './Redux-Store/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_3\":\"SignIn_form_3__2SSkU\",\"button\":\"SignIn_button__3DwEz\",\"label_rememberMe_block\":\"SignIn_label_rememberMe_block__lLv1A\",\"clearfix\":\"SignIn_clearfix__2yBzH\",\"register\":\"SignIn_register__XS3YG\",\"text_helper\":\"SignIn_text_helper__wRuGl\",\"angle\":\"SignIn_angle__1tSts\",\"text_helper_small_text\":\"SignIn_text_helper_small_text__31epX\",\"error_block\":\"SignIn_error_block__3QK1B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_paper_div\":\"Todolist_main_paper_div__1EygI\",\"block_name_and_delete\":\"Todolist_block_name_and_delete__a3zMX\",\"add_item_form\":\"Todolist_add_item_form__kUhT1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background_block_login_page\":\"LoginPage_background_block_login_page__39MEE\",\"block_login_page\":\"LoginPage_block_login_page__1-jxa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_loading\":\"Loading_main_loading__erV71\",\"loader\":\"Loading_loader__1A0mq\",\"span-1\":\"Loading_span-1__3G6uj\",\"span-2\":\"Loading_span-2__yWwgY\",\"span-3\":\"Loading_span-3__1yV3R\",\"span-4\":\"Loading_span-4__3f_h8\"};"],"sourceRoot":""}