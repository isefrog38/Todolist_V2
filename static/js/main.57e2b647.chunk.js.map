{"version":3,"sources":["api/todolists-api.ts","Components/AddItemForm/AddItemForm.tsx","Components/RenameSpanFunc/EditableSpan.tsx","Components/Task/Task.tsx","Components/Buttons/Button.tsx","state/todolists-reducer.ts","Components/Buttons/Buttons.tsx","Thunk/Todolist-thunk.ts","state/tasks-reducer.ts","Thunk/Task-thunk.ts","Components/Todolist/Todolist.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx","Components/Todolist/Todolist.module.css","Components/Task/Task.module.css"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","style","margin","TextField","variant","value","color","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","inputProps","maxLength","IconButton","size","onClick","width","height","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","model","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","s","is_done","Checkbox","Delete","CleanButton","activeButton","Button","initialState","changeTodolistFilterAC","filter","type","Buttons","filterBS","dispatch","useDispatch","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","createTodolistTC","then","response","data","resultCode","v1","addTodolistAC","updateTaskTC","domainModel","getState","tasks","find","t","apiModel","startDate","priority","description","deadline","updateTaskAC","item","Todolist","useEffect","setTasksAC","items","tasksForTodolist","removeTodolist","removeTodolistAC","changeTodolistTitle","changeTodolistTitleAC","updateTodolistTC","removeTaskAC","removeTaskTC","addTask","createTaskTC","changeStatus","newTitle","main_paper_div","block_name_and_delete","map","paddingTop","App","todolists","useSelector","state","addTodolist","AppBar","position","Toolbar","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","elevation","borderRadius","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","forEach","newTasks","todoListId","todolistTasks","newTasksArray","copyState","addedDate","order","todolist","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.57e2b647.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '46d03c13-5122-4b12-95a1-e807d8a6bece'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddBoxOutlinedIcon from '@mui/icons-material/AddBoxOutlined';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{margin: \"20px 50px\"}}>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                error={!!error}\r\n                value={title}\r\n                color={'info'}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label=\"Title\"\r\n                helperText={error}\r\n                inputProps={{ maxLength: 20 }}\r\n            />\r\n            <IconButton color=\"inherit\" size={\"large\"} onClick={addItem}>\r\n                <AddBoxOutlinedIcon style={{width: \"30px\", height: \"30px\"}} color={'inherit'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField inputProps={{ maxLength: 20 }} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} variant={\"standard\"}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport s from \"./Task.module.css\";\r\nimport { EditableSpan } from '../RenameSpanFunc/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from '../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.is_done : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {FilterValuesType} from \"../../state/todolists-reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    activeButton: FilterValuesType\r\n}\r\n\r\nexport const  CleanButton = ({title, onClickHandler, activeButton}: ButtonPropsType) => {\r\n    return (\r\n        <Button\r\n            color={activeButton === title ? \"secondary\" : \"secondary\"}\r\n            variant={activeButton === title ? \"contained\" : \"outlined\"}\r\n            onClick={onClickHandler}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}","import { v1 } from 'uuid';\r\nimport { TodolistType } from '../api/todolists-api'\r\n\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = SetTodolistsActionType\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'All'\r\n            }))\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'All',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: 'SET-TODOLISTS', todolists}\r\n}\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CleanButton} from \"./Button\";\r\nimport {changeTodolistFilterAC, FilterValuesType} from \"../../state/todolists-reducer\";\r\n\r\ntype ButtonsType = {\r\n    todolistId: string\r\n    filterBS: FilterValuesType\r\n}\r\n\r\nexport const Buttons = ({filterBS, todolistId}: ButtonsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'All')),[dispatch, todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'Active')),[dispatch, todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'Completed')),[dispatch, todolistId]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onAllClickHandler}\r\n                title={'All'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onActiveClickHandler}\r\n                title={'Active'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onCompletedClickHandler}\r\n                title={'Completed'}\r\n            />\r\n        </div>\r\n    );\r\n};","import {Dispatch} from \"redux\";\r\nimport {todolistsAPI} from \"../api/todolists-api\";\r\nimport {addTodolistAC, changeTodolistTitleAC, removeTodolistAC, setTodolistsAC} from \"../state/todolists-reducer\";\r\n\r\nexport const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    return todolistsAPI.getTodolists()\r\n        .then(response => {\r\n            dispatch(setTodolistsAC(response.data));\r\n        });\r\n}\r\n\r\nexport const updateTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    return todolistsAPI.updateTodolist(todolistId, title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title));\r\n            }\r\n        });\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    return todolistsAPI.deleteTodolist(todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            }\r\n        });\r\n}\r\n\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    return todolistsAPI.createTodolist(title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(title));\r\n            }\r\n        });\r\n}","import { TasksStateType } from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, UpdateTaskModelType} from '../api/todolists-api'\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n};\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n};\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n};\r\n\r\nexport type UpdateTaskActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    model: UpdateTaskModelType\r\n};\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n};\r\n\r\ntype ActionsType =\r\n    | SetTasksActionType\r\n    | SetTodolistsActionType\r\n    | RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | UpdateTaskActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            }\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, ...action.model} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (todolistId: string, task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const updateTaskAC = (taskId: string, todolistId: string, model: UpdateTaskModelType): UpdateTaskActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', todolistId, taskId, model}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {todolistsAPI, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {addTaskAC, removeTaskAC, setTasksAC, updateTaskAC} from \"../state/tasks-reducer\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nexport const getTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    return todolistsAPI.getTasks(todolistId)\r\n        .then(response => {\r\n            dispatch(setTasksAC(response.data.items, todolistId));\r\n        });\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateTaskModelType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId);\r\n\r\n        if (task) {\r\n            const apiModel = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel\r\n            };\r\n\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((response) => {\r\n                    dispatch(updateTaskAC(taskId, todolistId, response.data.data.item));\r\n                })\r\n        }\r\n    }\r\n\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    return todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            }\r\n        });\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    return todolistsAPI.createTask(todolistId, title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC(todolistId, response.data.data.item));\r\n            }\r\n        });\r\n}","import React, {memo, useCallback, useEffect} from 'react'\r\nimport s from \"./Todolist.module.css\";\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../RenameSpanFunc/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Task} from '../Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../api/todolists-api'\r\nimport {FilterValuesType} from '../../state/todolists-reducer'\r\nimport {Buttons} from \"../Buttons/Buttons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTodolistTC, updateTodolistTC} from \"../../Thunk/Todolist-thunk\";\r\nimport {createTaskTC, getTasksTC, removeTaskTC, updateTaskTC} from \"../../Thunk/Task-thunk\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    }, [])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    const removeTodolist = useCallback(function () {\r\n        dispatch(removeTodolistTC(props.id));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeTodolistTitle = useCallback(function (title: string) {\r\n        dispatch(updateTodolistTC(props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback( function (title: string) {\r\n        dispatch(createTaskTC( props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC( todolistId, taskId, {title: newTitle}));\r\n    }, [dispatch]);\r\n\r\n    return <div className={s.main_paper_div}>\r\n        <h3 className={s.block_name_and_delete}>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={removeTask}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          changeTaskStatus={changeStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Buttons todolistId={props.id} filterBS={props.filter}/>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Components/Todolist/Todolist';\r\nimport {AddItemForm} from './Components/AddItemForm/AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {TodolistDomainType} from './state/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskType} from './api/todolists-api';\r\nimport {createTodolistTC, getTodolistsTC} from \"./Thunk/Todolist-thunk\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC())\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"} color={\"secondary\"} style={{height: \"100px\"}}>\r\n                <Toolbar>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                </Grid>\r\n                <Grid container spacing={7}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper elevation={3}\r\n                                       style={{padding: '20px', borderRadius: \"10px\", backgroundColor: \"#ffffffa6\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        filter={tl.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_paper_div\":\"Todolist_main_paper_div__2-t2M\",\"block_name_and_delete\":\"Todolist_block_name_and_delete__299WF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__Wkrq3\"};"],"sourceRoot":""}