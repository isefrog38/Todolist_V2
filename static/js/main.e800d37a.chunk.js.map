{"version":3,"sources":["Components/LoginPage/LoginPage.module.css","api/todolists-api.ts","Components/AddItemForm/AddItemForm.tsx","Components/RenameSpanFunc/EditableSpan.tsx","Components/Task/Task.tsx","Components/Buttons/Button.tsx","Redux/todolists-reducer.ts","Components/Buttons/Buttons.tsx","Redux/tasks-reducer.ts","Thunk/Task-thunk.ts","Components/Todolist/Todolist.tsx","Thunk/Todolist-thunk.ts","Redux/Authorization-reducer.ts","Components/SignIn/SignIn.tsx","Thunk/Auth-thunk.ts","Components/LoginPage/LoginPage.tsx","App.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx","Components/SignIn/SignIn.module.css","Components/Todolist/Todolist.module.css","Components/Task/Task.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","style","display","TextField","variant","value","color","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","inputProps","maxLength","IconButton","size","onClick","width","height","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","model","AuthAPI","then","response","data","email","password","rememberMe","captcha","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","s","is_done","Checkbox","Delete","CleanButton","activeButton","Button","initialState","removeTodolistAC","type","addTodolistAC","changeTodolistTitleAC","changeTodolistFilterAC","filter","Buttons","filterBS","dispatch","useDispatch","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","setTasksAC","tasks","removeTaskAC","updateTaskTC","domainModel","getState","find","t","apiModel","startDate","priority","description","deadline","updateTaskAC","item","Todolist","useEffect","a","items","tasksForTodolist","removeTodolist","resultCode","changeTodolistTitle","updateTodolistTC","removeTaskTC","addTask","createTaskTC","changeStatus","newTitle","main_paper_div","block_name_and_delete","add_item_form","map","paddingTop","SET_USER_DATA","initialStateAuthorization","login","isFetching","isAuth","setAuthUserDataAC","payload","SignIn","registrationForm","useFormik","initialValues","validate","values","errors","test","length","onSubmit","responseAuthMe","console","log","LoginTC","resetForm","passwordOne","mustContainData","toLowerCase","toUpperCase","main_login","modal_wrapper","modal_window","form_3","handleSubmit","clearfix","htmlFor","placeholder","getFieldProps","touched","fontSize","text_helper","angle","text_helper_small_text","label_rememberMe_block","button","name","disabled","isValid","dirty","MustContainItem","meetsReq","classArr","push","join","setClass","LoginPage","main_block_login_page","App","todolists","useSelector","state","stateAuth","AuthorizationReducer","addTodolist","createTodolistTC","AppBar","position","Toolbar","Typography","component","sx","flexGrow","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","elevation","borderRadius","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","forEach","copyState","todoListId","addedDate","order","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e800d37a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_block_login_page\":\"LoginPage_main_block_login_page__23m4_\"};","import axios, { AxiosResponse } from 'axios'\r\nimport {AuthRequestType, ResponseGetAuthType} from \"../Types/AythTypes\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '46d03c13-5122-4b12-95a1-e807d8a6bece'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const AuthAPI = {\r\n    AuthUser () {\r\n        return instance.get<ResponseGetAuthType>(`auth/me`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    LogOut () {\r\n        return instance.delete<ResponseType>(`auth/login/`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    Login (email: string, password: string, rememberMe: boolean, captcha: boolean) {\r\n        return instance.post<AuthRequestType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login/`, {email, password, rememberMe, captcha})\r\n            .then(response => response.data);\r\n    },\r\n}\r\n\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddBoxOutlinedIcon from '@mui/icons-material/AddBoxOutlined';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{display: \"flex\"}}>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                error={!!error}\r\n                value={title}\r\n                color={'info'}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label=\"Title\"\r\n                helperText={error}\r\n                inputProps={{ maxLength: 20 }}\r\n            />\r\n            <IconButton color=\"inherit\" size={\"large\"} onClick={addItem}>\r\n                <AddBoxOutlinedIcon style={{width: \"30px\", height: \"30px\"}} color={'inherit'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField inputProps={{ maxLength: 20 }} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} variant={\"standard\"}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport s from \"./Task.module.css\";\r\nimport { EditableSpan } from '../RenameSpanFunc/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from '../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.is_done : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {FilterValuesType} from \"../../Redux/todolists-reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    activeButton: FilterValuesType\r\n}\r\n\r\nexport const  CleanButton = ({title, onClickHandler, activeButton}: ButtonPropsType) => {\r\n    return (\r\n        <Button\r\n            color={activeButton === title ? \"secondary\" : \"secondary\"}\r\n            variant={activeButton === title ? \"contained\" : \"outlined\"}\r\n            onClick={onClickHandler}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}","import { TodolistType } from '../api/todolists-api';\r\n\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n};\r\nexport type TodolistsActionsType =\r\n    | SetTodolistsActionType\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0}*/\r\n];\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({...tl, filter: 'All'}))\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{ id: action.todolistId, title: action.title, filter: 'All', addedDate: '', order: 0}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const );\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const );\r\nexport const addTodolistAC = (title: string, todolistId: string) => ({type: 'ADD-TODOLIST', title: title, todolistId} as const );\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const );\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const );\r\n\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CleanButton} from \"./Button\";\r\nimport {changeTodolistFilterAC, FilterValuesType} from \"../../Redux/todolists-reducer\";\r\n\r\ntype ButtonsType = {\r\n    todolistId: string\r\n    filterBS: FilterValuesType\r\n}\r\n\r\nexport const Buttons = ({filterBS, todolistId}: ButtonsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'All')),[dispatch, todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'Active')),[dispatch, todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'Completed')),[dispatch, todolistId]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onAllClickHandler}\r\n                title={'All'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onActiveClickHandler}\r\n                title={'Active'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onCompletedClickHandler}\r\n                title={'Completed'}\r\n            />\r\n        </div>\r\n    );\r\n};","import { TasksStateType } from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TaskType, UpdateTaskModelType} from '../api/todolists-api';\r\n\r\nexport type TaskActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | SetTodolistsActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n    ]*/\r\n};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.todolistId]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)};\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]};\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId} as const );\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const);\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({type: 'ADD-TASK', task} as const );\r\nexport const updateTaskAC = (taskId: string, todolistId: string, model: UpdateTaskModelType) => ({type: 'UPDATE-TASK', todolistId, taskId, model} as const );\r\n\r\n","import {todolistsAPI, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {addTaskAC, removeTaskAC, setTasksAC, updateTaskAC} from \"../Redux/tasks-reducer\";\r\nimport {AppRootStateType, AppThunk} from \"../Redux/store\";\r\n\r\nexport const getTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n    const response = await todolistsAPI.getTasks(todolistId);\r\n    dispatch(setTasksAC(response.data.items, todolistId));\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateTaskModelType): AppThunk =>\r\n    (dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId);\r\n\r\n        if (task) {\r\n            const apiModel = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel\r\n            };\r\n\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((response) => {\r\n                    dispatch(updateTaskAC(taskId, todolistId, response.data.data.item));\r\n                })\r\n        }\r\n    }\r\n\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => async dispatch => {\r\n    const response = await todolistsAPI.deleteTask(todolistId, taskId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(removeTaskAC(taskId, todolistId))\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n    const response = await todolistsAPI.createTask(todolistId, title);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(addTaskAC(todolistId, response.data.data.item));\r\n    }\r\n}","import React, {memo, useCallback, useEffect} from 'react'\r\nimport s from \"./Todolist.module.css\";\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../RenameSpanFunc/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Task} from '../Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../api/todolists-api'\r\nimport {FilterValuesType} from '../../Redux/todolists-reducer'\r\nimport {Buttons} from \"../Buttons/Buttons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTodolistTC, updateTodolistTC} from \"../../Thunk/Todolist-thunk\";\r\nimport {createTaskTC, getTasksTC, removeTaskTC, updateTaskTC} from \"../../Thunk/Task-thunk\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    }, [])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    const removeTodolist = useCallback(function () {\r\n        dispatch(removeTodolistTC(props.id));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeTodolistTitle = useCallback(function (title: string) {\r\n        dispatch(updateTodolistTC(props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback( function (title: string) {\r\n        dispatch(createTaskTC( props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC( todolistId, taskId, {title: newTitle}));\r\n    }, [dispatch]);\r\n\r\n    return <div className={s.main_paper_div}>\r\n        <h3 className={s.block_name_and_delete}>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <div className={s.add_item_form}>\r\n            <AddItemForm addItem={addTask}/>\r\n        </div>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={removeTask}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          changeTaskStatus={changeStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Buttons todolistId={props.id} filterBS={props.filter}/>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {todolistsAPI} from \"../api/todolists-api\";\r\nimport {addTodolistAC, changeTodolistTitleAC, removeTodolistAC, setTodolistsAC} from \"../Redux/todolists-reducer\";\r\nimport {AppThunk} from \"../Redux/store\";\r\n\r\nexport const getTodolistsTC = (): AppThunk => async dispatch => {\r\n    const response = await todolistsAPI.getTodolists();\r\n    dispatch(setTodolistsAC(response.data));\r\n}\r\n\r\nexport const updateTodolistTC = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n    const response = await todolistsAPI.updateTodolist(todolistId, title);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(changeTodolistTitleAC(todolistId, title));\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => async dispatch => {\r\n    const response = await todolistsAPI.deleteTodolist(todolistId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(removeTodolistAC(todolistId));\r\n    }\r\n}\r\n\r\nexport const createTodolistTC = (title: string): AppThunk => async dispatch => {\r\n    const response = await todolistsAPI.createTodolist(title);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(addTodolistAC(title, response.data.data.item.id));\r\n    }\r\n}","let SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\nexport type AuthActionType = SetUserDataAC;\r\nexport type initialStateAuthorizationType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n};\r\nexport type DataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n};\r\ntype SetUserDataAC = ReturnType<typeof setAuthUserDataAC>;\r\nlet initialStateAuthorization: initialStateAuthorizationType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n};\r\n\r\nexport const AuthorizationReducer = (state = initialStateAuthorization, action: AuthActionType): initialStateAuthorizationType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA :\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserDataAC = (payload: DataType) => {\r\n    return {type: SET_USER_DATA, payload} as const\r\n}","import React from \"react\";\r\nimport s from \"./SignIn.module.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {LoginTC} from \"../../Thunk/Auth-thunk\";\r\n\r\ntype SignInType = {\r\n\r\n};\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe?: boolean\r\n};\r\n\r\nconst SignIn = (props: SignInType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const registrationForm = useFormik({\r\n        initialValues: { email: \"\", password: \"\" , rememberMe: false, captcha: true},\r\n        validate: (values: FormikErrorType) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password || values.password.length < 4) {\r\n                errors.password = \"Password is required\";\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(LoginTC(values));\r\n            registrationForm.resetForm();\r\n        },\r\n    });\r\n\r\n    const passwordOne = registrationForm.values.password;\r\n    const mustContainData = [\r\n        [\"заглавную букву\", passwordOne.toLowerCase() !== passwordOne],\r\n        [\"строчную букву\", passwordOne.toUpperCase() !== passwordOne],\r\n        [\"цифру\", /\\d/.test(passwordOne)],\r\n        [\"5 символов\", passwordOne.length >= 4],\r\n    ];\r\n\r\n    return (\r\n        <div className={s.main_login}>\r\n            <div className={s.modal_wrapper}>\r\n                <div className={s.modal_window}>\r\n                    <form className={s.form_3} onSubmit={registrationForm.handleSubmit}>\r\n\r\n                        <h1 style={{color: \"white\"}}>Account login</h1>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"email\"\r\n                                placeholder=\"email\"\r\n                                {...registrationForm.getFieldProps(\"email\")}\r\n                            />\r\n                            {registrationForm.touched.email && registrationForm.errors.email ? (\r\n                                <div style={{color: \"red\", fontSize: \"1.2rem\"}}>{registrationForm.errors.email}</div>\r\n                            ) : null}\r\n                        </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"password\"\r\n                                    {...registrationForm.getFieldProps(\"password\")}\r\n                                />\r\n                                {registrationForm.values.password ? (\r\n                                    <div className={s.text_helper}>\r\n                                        <div className={s.angle}/>\r\n                                        <span>Пароль должен содержать как минимум:</span>\r\n                                        <div className={s.text_helper_small_text}>\r\n                                            {mustContainData.map((data) => (\r\n                                                <MustContainItem key={data} data={data}/>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                                <input\r\n                                    style={{width: \"50px\", height: \"50px\"}}\r\n                                    type=\"checkbox\"\r\n                                    id=\"remember\"\r\n                                    {...registrationForm.getFieldProps(\"rememberMe\")}\r\n                                />\r\n                                <label htmlFor=\"remember\" className={s.label_rememberMe_block}>\r\n                                    Remember me\r\n                                </label>\r\n\r\n                                <button\r\n                                    className={s.button}\r\n                                    type=\"submit\"\r\n                                    name=\"submit\"\r\n                                    value=\"Submit\"\r\n                                    disabled={!(registrationForm.isValid && registrationForm.dirty)}\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </p>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SignIn;\r\n/*export default RedirectToProfile(SignIn);*/\r\n\r\n\r\nconst MustContainItem = (props: any) => {\r\n    const { data } = props;\r\n    const label = data[0];\r\n    const meetsReq = data[1];\r\n\r\n    const setClass = () => {\r\n        const classArr = [\"invalidStyle\"]; //invalid logo img\r\n        if (meetsReq) classArr.push(\"validStyle\"); //valid logo img\r\n        return classArr.join(\" \");\r\n    };\r\n\r\n    return (\r\n        <span style={{fontSize: \"1rem\"}}>\r\n      <div className={\"validateChecklist\"}>\r\n        <span >{label}</span>\r\n        <div className={setClass()} />\r\n      </div>\r\n    </span>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import {AppThunk} from \"../Redux/store\";\r\nimport {setAuthUserDataAC} from \"../Redux/Authorization-reducer\";\r\nimport {AuthAPI} from \"../api/todolists-api\";\r\n\r\nexport const AuthMeTC = (): AppThunk => async dispatch => {\r\n    const response = await AuthAPI.AuthUser()\r\n    if (response.resultCode === 0) {\r\n        let {login, email, id} = response.data\r\n        dispatch(setAuthUserDataAC({id, email, login, isAuth: true}))\r\n    }\r\n}\r\n\r\nexport const LogOutTC = (): AppThunk => async dispatch => {\r\n    const response = await AuthAPI.LogOut()\r\n    if (response.resultCode === 0) {\r\n        dispatch(setAuthUserDataAC({id: null, email: null, login: null, isAuth: false}))\r\n    }\r\n}\r\n\r\nexport const LoginTC = (values: {email: string, password: string, rememberMe: boolean, captcha: boolean}): AppThunk => async dispatch => {\r\n    const response = await AuthAPI.Login(values.email, values.password, values.rememberMe,values.captcha);\r\n    const responseAuthMe = await AuthAPI.AuthUser();\r\n    if (response.resultCode === 0) {\r\n    console.log(response)\r\n        let {login, email, id} = responseAuthMe.data;\r\n        dispatch(setAuthUserDataAC({id, email, login, isAuth: true}))\r\n    }\r\n}","import React from 'react';\r\nimport SignIn from \"../SignIn/SignIn\";\r\nimport s from \"./LoginPage.module.css\";\r\n\r\nexport const LoginPage = () => {\r\n    return (\r\n        <div className={s.main_block_login_page}>\r\n            <SignIn/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Components/Todolist/Todolist';\r\nimport {AddItemForm} from './Components/AddItemForm/AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {TodolistDomainType} from './Redux/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './Redux/store';\r\nimport {TaskType} from './api/todolists-api';\r\nimport {createTodolistTC, getTodolistsTC} from \"./Thunk/Todolist-thunk\";\r\nimport {initialStateAuthorizationType} from \"./Redux/Authorization-reducer\";\r\nimport SignIn from \"./Components/SignIn/SignIn\";\r\nimport {AuthMeTC, LogOutTC} from \"./Thunk/Auth-thunk\";\r\nimport {Button, Typography} from \"@mui/material\";\r\nimport {LoginPage} from \"./Components/LoginPage/LoginPage\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const stateAuth = useSelector<AppRootStateType, initialStateAuthorizationType>(state => state.AuthorizationReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMeTC())\r\n        dispatch(getTodolistsTC())\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n    const onClickHandler = () => dispatch(LogOutTC());\r\n\r\n\r\n\r\n    if (!stateAuth.isAuth) return <LoginPage />\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"} color={\"secondary\"} style={{height: \"100px\"}}>\r\n                <Toolbar>\r\n                    <div className={\"AddItem\"}>\r\n                        <AddItemForm addItem={addTodolist} />\r\n                    </div>\r\n\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }} className={\"global_todo_title\"}>\r\n                        Todolist for your business\r\n                    </Typography>\r\n\r\n                    <h3 className={\"Login_name\"}>{stateAuth.login}</h3>\r\n                    <Button onClick={onClickHandler} color=\"error\" variant=\"contained\">LogOut</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                </Grid>\r\n                <Grid container spacing={7}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper elevation={3}\r\n                                       style={{\r\n                                           padding: '20px',\r\n                                           borderRadius: \"10px\",\r\n                                           backgroundColor: \"#ffffffa6\"\r\n                                       }}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        filter={tl.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {TaskActionsType, tasksReducer} from './tasks-reducer';\r\nimport {TodolistsActionsType, todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {AuthActionType, AuthorizationReducer} from \"./Authorization-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    AuthorizationReducer,\r\n})\r\n\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport type AppGlobalActionsType = TaskActionsType | TodolistsActionsType | AuthActionType;\r\n\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppGlobalActionsType> ;\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_3\":\"SignIn_form_3__2SSkU\",\"button\":\"SignIn_button__3DwEz\",\"label_rememberMe_block\":\"SignIn_label_rememberMe_block__lLv1A\",\"clearfix\":\"SignIn_clearfix__2yBzH\",\"register\":\"SignIn_register__XS3YG\",\"text_helper\":\"SignIn_text_helper__wRuGl\",\"angle\":\"SignIn_angle__1tSts\",\"text_helper_small_text\":\"SignIn_text_helper_small_text__31epX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_paper_div\":\"Todolist_main_paper_div__1EygI\",\"block_name_and_delete\":\"Todolist_block_name_and_delete__a3zMX\",\"add_item_form\":\"Todolist_add_item_form__kUhT1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__3JDJx\"};"],"sourceRoot":""}