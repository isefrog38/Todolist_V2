{"version":3,"sources":["Components/Task/Task.module.css","api/todolists-api.ts","Components/AddItemForm/AddItemForm.tsx","Components/RenameSpanFunc/EditableSpan.tsx","Components/Task/Task.tsx","Components/Buttons/Button.tsx","Redux-Store/todolists-reducer.ts","Components/Buttons/Buttons.tsx","Redux-Store/App-reducer.ts","Utils/Error-urils.ts","Redux-Store/tasks-reducer.ts","Thunk/Task-thunk.ts","Components/Todolist/Todolist.tsx","Thunk/Todolist-thunk.ts","Redux-Store/Authorization-reducer.ts","Components/SignIn/SignIn.tsx","Thunk/Auth-thunk.ts","Components/SnackBar/SnackBar.tsx","Components/LoginPage/LoginPage.tsx","Components/Header/Header.tsx","Components/ProgressBar/ProgressBar.tsx","App.tsx","reportWebVitals.ts","Redux-Store/store.ts","index.tsx","Components/SignIn/SignIn.module.css","Components/Todolist/Todolist.module.css","Components/LoginPage/LoginPage.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","AddItemForm","React","memo","disabled","addItem","color","useState","title","setTitle","error","setError","addItems","trim","style","display","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","size","onClick","width","height","EditableSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","model","AuthAPI","then","response","data","email","password","rememberMe","captcha","Task","props","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","s","is_done","Checkbox","entityTaskStatus","Delete","CleanButton","activeButton","Button","initialState","removeTodolistAC","type","addTodolistAC","changeTodolistTitleAC","changeTodolistFilterAC","filter","changeTodolistEntityStatusAC","entityStatus","Buttons","filterBS","dispatch","useDispatch","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","APP_SET_STATUS","SET_APP_ERROR","setAppStatusAC","setAppErrorMessageAC","handleServerAppError","messages","length","handleServerNetworkError","message","setTasksAC","tasks","removeTaskAC","updateTaskAC","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","a","allTasksFromState","tasksForCurrentTodolist","find","t","apiModel","startDate","priority","description","deadline","resultCode","item","Error","Todolist","useEffect","itemsWithStatus","items","map","el","tasksForTodolist","removeTodolist","changeTodolistTitle","updateTodolistTC","removeTaskTC","addTask","createTaskTC","changeStatus","newTitle","main_paper_div","block_name_and_delete","add_item_form","paddingTop","SET_USER_DATA","initialStateAuthorization","login","isFetching","isAuth","setAuthUserDataAC","payload","SignIn","registrationForm","useFormik","initialValues","validate","values","errors","test","onSubmit","responseAuthMe","console","log","LoginTC","resetForm","passwordOne","mustContainData","toLowerCase","toUpperCase","main_login","modal_wrapper","modal_window","form_3","handleSubmit","clearfix","htmlFor","placeholder","getFieldProps","touched","fontSize","text_helper","angle","text_helper_small_text","label_rememberMe_block","button","name","isValid","dirty","MustContainItem","meetsReq","classArr","push","join","setClass","Snackbars","typeError","useSelector","state","AppReducer","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","Alert","forwardRef","ref","elevation","LoginPage","background_block_login_page","block_login_page","Header","addTodolist","AppBar","position","Toolbar","Typography","component","flexGrow","ProgressBar","Box","LinearProgress","App","todolists","AuthorizationReducer","createTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","borderRadius","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","forEach","copyState","todoListId","addedDate","order","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.788b5e9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__3JDJx\"};","import axios, { AxiosResponse } from 'axios'\r\nimport {AuthRequestType, ResponseGetAuthType} from \"../Types/AythTypes\";\r\nimport {RequestStatusType} from \"../Redux-Store/App-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '46d03c13-5122-4b12-95a1-e807d8a6bece'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const AuthAPI = {\r\n    AuthUser () {\r\n        return instance.get<ResponseGetAuthType>(`auth/me`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    LogOut () {\r\n        return instance.delete<ResponseType>(`auth/login/`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    Login (email: string, password: string, rememberMe: boolean, captcha: boolean) {\r\n        return instance.post<AuthRequestType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login/`, {email, password, rememberMe, captcha})\r\n            .then(response => response.data);\r\n    },\r\n}\r\n\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddBoxOutlinedIcon from '@mui/icons-material/AddBoxOutlined';\r\n\r\ntype AddItemFormPropsType = {\r\n    color: 'info' | 'secondary'\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({disabled, addItem, color}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItems = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItems();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{display: \"flex\"}}>\r\n            <TextField\r\n                disabled={disabled}\r\n                variant=\"outlined\"\r\n                error={!!error}\r\n                value={title}\r\n                color={color}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label=\"Title\"\r\n                helperText={error}\r\n            />\r\n            <IconButton color=\"inherit\" size={\"large\"} onClick={addItems} disabled={disabled}>\r\n                <AddBoxOutlinedIcon style={{width: \"30px\", height: \"30px\"}} color={'inherit'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    disabled?: boolean\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({value, onChange, disabled}: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode();\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            disabled={disabled}\r\n            onKeyPress={onKeyPressHandler}\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus onBlur={activateViewMode}\r\n            variant={\"standard\"}/>\r\n\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport s from \"./Task.module.css\";\r\nimport {EditableSpan} from '../RenameSpanFunc/EditableSpan'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {TaskTypeWithStatusEntity} from \"../../Redux-Store/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskTypeWithStatusEntity\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const disabled = !!TaskStatuses.New ;\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.is_done : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan disabled={props.task.entityTaskStatus === 'loading'} value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityTaskStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {FilterValuesType} from \"../../Redux-Store/todolists-reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    activeButton: FilterValuesType\r\n}\r\n\r\nexport const  CleanButton = ({title, onClickHandler, activeButton}: ButtonPropsType) => {\r\n    return (\r\n        <Button\r\n            color={activeButton === title ? \"secondary\" : \"secondary\"}\r\n            variant={activeButton === title ? \"contained\" : \"outlined\"}\r\n            onClick={onClickHandler}>\r\n            {title}\r\n        </Button>\r\n    )\r\n}","import { TodolistType } from '../api/todolists-api';\r\nimport {RequestStatusType} from \"./App-reducer\";\r\n\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\nexport type TodolistsActionsType =\r\n    | SetTodolistsActionType\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0}*/\r\n];\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({...tl, entityStatus: 'idle', filter: 'All'}))\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{ id: action.todolistId, title: action.title, entityStatus: 'idle', filter: 'All', addedDate: '', order: 0}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'CHANGE_TODOLIST_ENTITY_STATUS': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const );\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const );\r\nexport const addTodolistAC = (title: string, todolistId: string) => ({type: 'ADD-TODOLIST', title: title, todolistId} as const );\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const );\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const );\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({type: 'CHANGE_TODOLIST_ENTITY_STATUS', id, entityStatus} as const );\r\n","import React, {useCallback} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CleanButton} from \"./Button\";\r\nimport {changeTodolistFilterAC, FilterValuesType} from \"../../Redux-Store/todolists-reducer\";\r\n\r\ntype ButtonsType = {\r\n    todolistId: string\r\n    filterBS: FilterValuesType\r\n}\r\n\r\nexport const Buttons = ({filterBS, todolistId}: ButtonsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'All')),[dispatch, todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'Active')),[dispatch, todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolistId, 'Completed')),[dispatch, todolistId]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onAllClickHandler}\r\n                title={'All'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onActiveClickHandler}\r\n                title={'Active'}\r\n            />\r\n            <CleanButton\r\n                activeButton={filterBS}\r\n                onClickHandler={onCompletedClickHandler}\r\n                title={'Completed'}\r\n            />\r\n        </div>\r\n    );\r\n};","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type SetAppErrorMessageActionType = ReturnType <typeof setAppErrorMessageAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type AppActionsType =\r\n    | SetAppErrorMessageActionType\r\n    | SetAppStatusActionType;\r\nexport type AppInitialStateType = {\r\n    status: RequestStatusType\r\n    error: null | string\r\n};\r\n\r\nconst APP_SET_STATUS = \"APP_SET_STATUS\",\r\n      SET_APP_ERROR = \"SET_APP_ERROR\";\r\n\r\nconst initialState: AppInitialStateType = {\r\n    status: 'succeeded',\r\n    error: null,\r\n}\r\n\r\nexport const AppReducer = (state = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case APP_SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case SET_APP_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: APP_SET_STATUS, status} as const );\r\nexport const setAppErrorMessageAC = (error: string | null) => ({type: SET_APP_ERROR, error} as const );\r\n","import { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\nimport {setAppErrorMessageAC, setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\nimport {SetAppStatusActionType} from \"../Redux-Store/App-reducer\";\r\nimport {SetAppErrorMessageActionType} from \"../Redux-Store/App-reducer\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorMessageAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorMessageAC('Some error occurred'))\r\n    }\r\n    debugger\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    debugger\r\n    dispatch(setAppErrorMessageAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorMessageActionType | SetAppStatusActionType>;\r\n\r\n\r\n\r\n\r\n\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TaskType, UpdateTaskModelType} from '../api/todolists-api';\r\nimport {RequestStatusType} from \"./App-reducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskTypeWithStatusEntity>\r\n}\r\n\r\nexport type TaskTypeWithStatusEntity = TaskType & {\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport type TaskActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | SetTodolistsActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low, entityTaskStatus: \"idle\" },\r\n    ]*/\r\n};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.todolistId]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)};\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]};\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)};\r\n        }\r\n        case 'CHANGE_TASK_ENTITY_STATUS': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, entityTaskStatus: action.entityStatus} : t)};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setTasksAC = (tasks: Array<TaskTypeWithStatusEntity>, todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId} as const );\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const);\r\nexport const addTaskAC = (todolistId: string, task: TaskTypeWithStatusEntity) => ({type: 'ADD-TASK', task } as const );\r\nexport const updateTaskAC = (taskId: string, todolistId: string, model: UpdateTaskModelType) => ({type: 'UPDATE-TASK', todolistId, taskId, model} as const );\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType) => ({type: 'CHANGE_TASK_ENTITY_STATUS', taskId, todolistId, entityStatus} as const );\r\n\r\n","import {todolistsAPI, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskEntityStatusAC,\r\n    removeTaskAC,\r\n    setTasksAC,\r\n    updateTaskAC\r\n} from \"../Redux-Store/tasks-reducer\";\r\nimport {AppRootStateType, AppThunk} from \"../Redux-Store/store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\nimport {changeTodolistEntityStatusAC} from \"../Redux-Store/todolists-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Error-urils\";\r\n\r\nexport const getTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.getTasks(todolistId);\r\n        if (response.data.error === null) {\r\n            let itemsWithStatus = response.data.items.map(el => ({...el, entityTaskStatus: 'idle' as RequestStatusType}));\r\n            dispatch(setTasksAC(itemsWithStatus, todolistId));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateTaskModelType): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'));\r\n        dispatch(setAppStatusAC('loading'));\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId);\r\n\r\n        if (task) {\r\n            const apiModel = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel\r\n            };\r\n\r\n            try {\r\n                const response = await todolistsAPI.updateTask(todolistId, taskId, apiModel);\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, todolistId, response.data.data.item));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'succeeded'));\r\n                } else {\r\n                    handleServerAppError(response.data, dispatch);\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'));\r\n                }\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    handleServerNetworkError(error, dispatch);\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'));\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.deleteTask(todolistId, taskId);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'succeeded'));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'));\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.createTask(todolistId, title);\r\n        if (response.data.resultCode === 0) {\r\n            let itemsWithStatus = {...response.data.data.item, entityTaskStatus: 'idle' as RequestStatusType };\r\n            dispatch(addTaskAC(todolistId, itemsWithStatus));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    }\r\n}","import React, {memo, useCallback, useEffect} from 'react'\r\nimport s from \"./Todolist.module.css\";\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../RenameSpanFunc/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from '../Task/Task'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {FilterValuesType} from '../../Redux-Store/todolists-reducer'\r\nimport {Buttons} from \"../Buttons/Buttons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTodolistTC, updateTodolistTC} from \"../../Thunk/Todolist-thunk\";\r\nimport {createTaskTC, getTasksTC, removeTaskTC, updateTaskTC} from \"../../Thunk/Task-thunk\";\r\nimport {RequestStatusType} from \"../../Redux-Store/App-reducer\";\r\nimport {TaskTypeWithStatusEntity} from \"../../Redux-Store/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskTypeWithStatusEntity>\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    }, [])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    const removeTodolist = useCallback(function () {\r\n        dispatch(removeTodolistTC(props.id));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeTodolistTitle = useCallback(function (title: string) {\r\n        dispatch(updateTodolistTC(props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string) {\r\n        dispatch(createTaskTC(props.id, title));\r\n    }, [dispatch, props.id]);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {title: newTitle}));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={s.main_paper_div}>\r\n\r\n            <h3 className={s.block_name_and_delete}>\r\n                <EditableSpan disabled={props.entityStatus === 'loading'} value={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton size={\"large\"} onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <div className={s.add_item_form}>\r\n                <AddItemForm addItem={addTask} color={'secondary'} disabled={props.entityStatus === 'loading'}/>\r\n            </div>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task key={t.id}\r\n                                                    task={t}\r\n                                                    todolistId={props.id}\r\n                                                    removeTask={removeTask}\r\n                                                    changeTaskTitle={changeTaskTitle}\r\n                                                    changeTaskStatus={changeStatus}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: '10px'}}>\r\n                <Buttons todolistId={props.id} filterBS={props.filter}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import {todolistsAPI} from \"../api/todolists-api\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC\r\n} from \"../Redux-Store/todolists-reducer\";\r\nimport {AppThunk} from \"../Redux-Store/store\";\r\nimport {setAppStatusAC} from \"../Redux-Store/App-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../Utils/Error-urils\";\r\nimport {removeTaskAC} from \"../Redux-Store/tasks-reducer\";\r\n\r\nexport const getTodolistsTC = (): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.getTodolists();\r\n        if (response.status === 200) {\r\n            dispatch(setTodolistsAC(response.data));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTodolistTC = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n    dispatch(changeTodolistEntityStatusAC( todolistId, 'loading' ));\r\n\r\n    try {\r\n        const response = await todolistsAPI.updateTodolist(todolistId, title);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(changeTodolistTitleAC(todolistId, title));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(changeTodolistEntityStatusAC( todolistId, 'succeeded' ));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(changeTodolistEntityStatusAC( todolistId, 'loading' ));\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.deleteTodolist(todolistId);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(removeTodolistAC(todolistId));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(changeTodolistEntityStatusAC( todolistId, 'succeeded' ));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const createTodolistTC = (title: string): AppThunk => async dispatch => {\r\n\r\n    dispatch(setAppStatusAC('loading'));\r\n\r\n    try {\r\n        const response = await todolistsAPI.createTodolist(title);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(addTodolistAC(title, response.data.data.item.id));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        } else {\r\n            handleServerAppError(response.data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n}","let SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\nexport type AuthActionType = SetUserDataAC;\r\ntype DataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n};\r\nexport type initialStateAuthorizationType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n};\r\ntype SetUserDataAC = ReturnType<typeof setAuthUserDataAC>;\r\nlet initialStateAuthorization: initialStateAuthorizationType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n};\r\n\r\nexport const AuthorizationReducer = (state = initialStateAuthorization, action: AuthActionType): initialStateAuthorizationType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA :\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserDataAC = (payload: DataType) => {\r\n    return {type: SET_USER_DATA, payload} as const\r\n}","import React from \"react\";\r\nimport s from \"./SignIn.module.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {LoginTC} from \"../../Thunk/Auth-thunk\";\r\n\r\ntype SignInType = {\r\n\r\n};\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe?: boolean\r\n};\r\n\r\nconst SignIn = (props: SignInType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const registrationForm = useFormik({\r\n        initialValues: { email: \"\", password: \"\" , rememberMe: false, captcha: true},\r\n        validate: (values: FormikErrorType) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password || values.password.length < 4) {\r\n                errors.password = \"Password is required\";\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(LoginTC(values));\r\n            registrationForm.resetForm();\r\n        },\r\n    });\r\n\r\n    const passwordOne = registrationForm.values.password;\r\n    const mustContainData = [\r\n        [\"заглавную букву\", passwordOne.toLowerCase() !== passwordOne],\r\n        [\"строчную букву\", passwordOne.toUpperCase() !== passwordOne],\r\n        [\"цифру\", /\\d/.test(passwordOne)],\r\n        [\"5 символов\", passwordOne.length >= 4],\r\n    ];\r\n\r\n    return (\r\n        <div className={s.main_login}>\r\n            <div className={s.modal_wrapper}>\r\n                <div className={s.modal_window}>\r\n                    <form className={s.form_3} onSubmit={registrationForm.handleSubmit}>\r\n\r\n                        <h1 style={{color: \"white\"}}>Account login</h1>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"email\"\r\n                                placeholder=\"email\"\r\n                                {...registrationForm.getFieldProps(\"email\")}\r\n                            />\r\n                            {registrationForm.touched.email && registrationForm.errors.email ? (\r\n                                <div style={{color: \"red\", fontSize: \"1.2rem\"}}>{registrationForm.errors.email}</div>\r\n                            ) : null}\r\n                        </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"password\"\r\n                                    {...registrationForm.getFieldProps(\"password\")}\r\n                                />\r\n                                {registrationForm.values.password ? (\r\n                                    <div className={s.text_helper}>\r\n                                        <div className={s.angle}/>\r\n                                        <span>Пароль должен содержать как минимум:</span>\r\n                                        <div className={s.text_helper_small_text}>\r\n                                            {mustContainData.map((data) => (\r\n                                                <MustContainItem key={data} data={data}/>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                                <input\r\n                                    style={{width: \"50px\", height: \"50px\"}}\r\n                                    type=\"checkbox\"\r\n                                    id=\"remember\"\r\n                                    {...registrationForm.getFieldProps(\"rememberMe\")}\r\n                                />\r\n                                <label htmlFor=\"remember\" className={s.label_rememberMe_block}>\r\n                                    Remember me\r\n                                </label>\r\n\r\n                                <button\r\n                                    className={s.button}\r\n                                    type=\"submit\"\r\n                                    name=\"submit\"\r\n                                    value=\"Submit\"\r\n                                    disabled={!(registrationForm.isValid && registrationForm.dirty)}\r\n                                >\r\n                                    Submit\r\n                                </button>\r\n                            </p>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SignIn;\r\n/*export default RedirectToProfile(SignIn);*/\r\n\r\n\r\nconst MustContainItem = (props: any) => {\r\n    const { data } = props;\r\n    const label = data[0];\r\n    const meetsReq = data[1];\r\n\r\n    const setClass = () => {\r\n        const classArr = [\"invalidStyle\"]; //invalid logo img\r\n        if (meetsReq) classArr.push(\"validStyle\"); //valid logo img\r\n        return classArr.join(\" \");\r\n    };\r\n\r\n    return (\r\n        <span style={{fontSize: \"1rem\"}}>\r\n      <div className={\"validateChecklist\"}>\r\n        <span >{label}</span>\r\n        <div className={setClass()} />\r\n      </div>\r\n    </span>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import {AppThunk} from \"../Redux-Store/store\";\r\nimport {setAuthUserDataAC} from \"../Redux-Store/Authorization-reducer\";\r\nimport {AuthAPI} from \"../api/todolists-api\";\r\n\r\nexport const AuthMeTC = (): AppThunk => async dispatch => {\r\n    const response = await AuthAPI.AuthUser()\r\n    if (response.resultCode === 0) {\r\n        let {login, email, id} = response.data\r\n        dispatch(setAuthUserDataAC({id, email, login, isAuth: true}))\r\n    }\r\n}\r\n\r\nexport const LogOutTC = (): AppThunk => async dispatch => {\r\n    const response = await AuthAPI.LogOut()\r\n    if (response.resultCode === 0) {\r\n        dispatch(setAuthUserDataAC({id: null, email: null, login: null, isAuth: false}))\r\n    }\r\n}\r\n\r\nexport const LoginTC = (values: {email: string, password: string, rememberMe: boolean, captcha: boolean}): AppThunk => async dispatch => {\r\n    const response = await AuthAPI.Login(values.email, values.password, values.rememberMe,values.captcha);\r\n    const responseAuthMe = await AuthAPI.AuthUser();\r\n    if (response.resultCode === 0) {\r\n    console.log(response)\r\n        let {login, email, id} = responseAuthMe.data;\r\n        dispatch(setAuthUserDataAC({id, email, login, isAuth: true}))\r\n    }\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux-Store/store\";\r\nimport {AppInitialStateType, setAppErrorMessageAC} from \"../../Redux-Store/App-reducer\";\r\n\r\ntype TypeErrorSnackbars = 'error' | 'warning';\r\n\r\ntype SnackbarsType = {\r\n  typeError:  TypeErrorSnackbars\r\n};\r\n\r\nexport const Snackbars = ({typeError}: SnackbarsType) => {\r\n\r\n    const { error } = useSelector<AppRootStateType, AppInitialStateType>(state => state.AppReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorMessageAC(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'center'}}>\r\n            <Alert onClose={handleClose} severity={typeError} sx={{width: '100%'}}>\r\n                {error} 😠\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});","import React from 'react';\r\nimport SignIn from \"../SignIn/SignIn\";\r\nimport s from \"./LoginPage.module.css\";\r\nimport {Snackbars} from \"../SnackBar/SnackBar\";\r\n\r\nexport const LoginPage = () => {\r\n    return (\r\n        <div className={s.background_block_login_page}>\r\n            <div className={s.block_login_page}>\r\n                <Snackbars typeError={'error'}/>\r\n                <SignIn/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {Button, Typography} from \"@mui/material\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport {RequestStatusType} from \"../../Redux-Store/App-reducer\";\r\n\r\ntype HeaderType = {\r\n    status: RequestStatusType\r\n    addTodolist: (title: string) => void\r\n    onClickHandler: () => void\r\n    login: string | null\r\n}\r\n\r\nexport const Header = ({ status, login, onClickHandler, addTodolist }: HeaderType) => {\r\n    return (\r\n        <AppBar position={\"static\"} color={\"secondary\"} style={{height: \"100px\"}}>\r\n            <Toolbar>\r\n                <div className={\"AddItem\"}>\r\n                    <AddItemForm addItem={addTodolist} color={\"info\"} disabled={status === 'loading' && true}/>\r\n                </div>\r\n\r\n                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}} className={\"global_todo_title\"}>\r\n                    Todolist for your business\r\n                </Typography>\r\n\r\n                <h3 className={\"Login_name\"}>{login}</h3>\r\n                <Button onClick={onClickHandler} color=\"error\" variant=\"contained\">LogOut</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Box, LinearProgress} from \"@mui/material\";\r\n\r\nexport const ProgressBar = () => {\r\n    return (\r\n        <Box sx={{ width: '100%' }} >\r\n            <LinearProgress color={\"secondary\"} />\r\n        </Box>\r\n    );\r\n};","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Components/Todolist/Todolist';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {TodolistDomainType} from './Redux-Store/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './Redux-Store/store';\r\nimport {createTodolistTC, getTodolistsTC} from \"./Thunk/Todolist-thunk\";\r\nimport {initialStateAuthorizationType} from \"./Redux-Store/Authorization-reducer\";\r\nimport {AuthMeTC, LogOutTC} from \"./Thunk/Auth-thunk\";\r\nimport {LoginPage} from \"./Components/LoginPage/LoginPage\";\r\nimport {Header} from \"./Components/Header/Header\";\r\nimport {ProgressBar} from \"./Components/ProgressBar/ProgressBar\";\r\nimport {Snackbars} from \"./Components/SnackBar/SnackBar\";\r\nimport {AppInitialStateType} from \"./Redux-Store/App-reducer\";\r\nimport {TasksStateType} from \"./Redux-Store/tasks-reducer\";\r\n\r\nconst App = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const { login , isAuth } = useSelector<AppRootStateType, initialStateAuthorizationType>(state => state.AuthorizationReducer);\r\n    const { status } = useSelector<AppRootStateType, AppInitialStateType>(state => state.AppReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMeTC())\r\n        dispatch(getTodolistsTC())\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n    const onClickHandler = () => dispatch(LogOutTC());\r\n\r\n\r\n    if (!isAuth) return <LoginPage/>;\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header login={login} addTodolist={addTodolist} onClickHandler={onClickHandler} status={status}/>\r\n\r\n            {/*Tools*/}\r\n            <div className=\"progress_bar_padding\">{status === 'loading' && <ProgressBar />}</div>\r\n            <Snackbars typeError={'error'}/>\r\n\r\n            <div className={\"MainContainer\"}>\r\n                <Grid container style={{width: \"100%\", padding: '40px'}}>\r\n                    <Grid container spacing={7}>\r\n                        {\r\n                            todolists.map(tl => {\r\n                                let allTodolistTasks = tasks[tl.id];\r\n\r\n                                return <Grid item key={tl.id}>\r\n                                    <Paper elevation={3}\r\n                                           style={{\r\n                                               padding: '20px',\r\n                                               borderRadius: \"10px\",\r\n                                               backgroundColor: \"#ffffffa6\"\r\n                                           }}>\r\n                                        <Todolist\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={allTodolistTasks}\r\n                                            filter={tl.filter}\r\n                                            entityStatus={tl.entityStatus}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            })\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {TaskActionsType, tasksReducer} from './tasks-reducer';\r\nimport {TodolistsActionsType, todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {AuthActionType, AuthorizationReducer} from \"./Authorization-reducer\";\r\nimport {AppActionsType, AppReducer} from \"./App-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    AuthorizationReducer,\r\n    AppReducer,\r\n})\r\n\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport type AppGlobalActionsType = TaskActionsType | TodolistsActionsType | AuthActionType | AppActionsType;\r\n\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppGlobalActionsType> ;\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './Redux-Store/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_3\":\"SignIn_form_3__2SSkU\",\"button\":\"SignIn_button__3DwEz\",\"label_rememberMe_block\":\"SignIn_label_rememberMe_block__lLv1A\",\"clearfix\":\"SignIn_clearfix__2yBzH\",\"register\":\"SignIn_register__XS3YG\",\"text_helper\":\"SignIn_text_helper__wRuGl\",\"angle\":\"SignIn_angle__1tSts\",\"text_helper_small_text\":\"SignIn_text_helper_small_text__31epX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_paper_div\":\"Todolist_main_paper_div__1EygI\",\"block_name_and_delete\":\"Todolist_block_name_and_delete__a3zMX\",\"add_item_form\":\"Todolist_add_item_form__kUhT1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background_block_login_page\":\"LoginPage_background_block_login_page__39MEE\",\"block_login_page\":\"LoginPage_block_login_page__1-jxa\"};"],"sourceRoot":""}